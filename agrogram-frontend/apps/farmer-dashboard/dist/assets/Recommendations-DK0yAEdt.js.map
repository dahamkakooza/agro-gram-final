{"version":3,"file":"Recommendations-DK0yAEdt.js","sources":["../../../../packages/api/src/recommendationsAPI.js","../../src/pages/Recommendations.jsx"],"sourcesContent":["import djangoClient from './djangoClient.js';\r\n\r\nconst recommendationsAPI = {\r\n  // Core AI Services\r\n  getCropRecommendation: (data) => djangoClient.post('/api/v1/recommendations/crop-recommendation/', data),\r\n  getPricePrediction: (data) => djangoClient.post('/api/v1/recommendations/price-prediction/', data),\r\n  agricultureChat: (data) => djangoClient.post('/api/v1/recommendations/agriculture-chat/', data),\r\n  \r\n  // Status and Diagnostic Endpoints\r\n  getNetworkStatus: () => djangoClient.get('/api/v1/recommendations/network-status/'),\r\n  getGeminiStatus: () => djangoClient.get('/api/v1/recommendations/gemini-status/'),\r\n  getGeminiTest: () => djangoClient.get('/api/v1/recommendations/gemini-test/'),\r\n  getSystemDiagnostic: () => djangoClient.get('/api/v1/recommendations/system-diagnostic/'),\r\n  \r\n  // Feedback (temporarily disabled)\r\n  submitFeedback: (data) => djangoClient.post('/api/v1/recommendations/feedback/', data),\r\n};\r\n\r\nexport default recommendationsAPI;","import React, { useState, useEffect } from 'react';\r\nimport { recommendationsAPI, apiUtils } from '@agro-gram/api';\r\nimport { Card, Button, Input, Select, TextArea, Tabs, Modal } from '@agro-gram/ui';\r\nimport './Recommendations.css';\r\n\r\nconst LoadingSpinner = () => (\r\n  <div className=\"flex justify-center items-center p-4\">\r\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n    <span className=\"ml-2\">Loading...</span>\r\n  </div>\r\n);\r\n\r\nconst Recommendations = () => {\r\n  const [activeTab, setActiveTab] = useState('crop');\r\n  const [cropRecommendation, setCropRecommendation] = useState(null);\r\n  const [pricePrediction, setPricePrediction] = useState(null);\r\n  const [chatHistory, setChatHistory] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [networkStatus, setNetworkStatus] = useState(null);\r\n  const [errors, setErrors] = useState({});\r\n  const [globalError, setGlobalError] = useState('');\r\n  \r\n  const [cropForm, setCropForm] = useState({\r\n    soilType: 'Loamy',\r\n    ph: '6.5',\r\n    temperature: '25',\r\n    rainfall: '800',\r\n    location: '',\r\n    season: 'Rainy',\r\n    farmSize: '',\r\n    previousCrops: '',\r\n    nitrogen: '50',\r\n    phosphorus: '50',\r\n    potassium: '50',\r\n    humidity: '60'\r\n  });\r\n\r\n  const [priceForm, setPriceForm] = useState({\r\n    cropType: 'Maize',\r\n    region: '',\r\n    predictionPeriod: '1 Month',\r\n    useGlobal: false\r\n  });\r\n\r\n  const [chatForm, setChatForm] = useState({\r\n    question: '',\r\n    user_context: {}\r\n  });\r\n\r\n  const soilTypes = [\r\n    { value: 'Loamy', label: 'Loamy' },\r\n    { value: 'Clay', label: 'Clay' },\r\n    { value: 'Sandy', label: 'Sandy' },\r\n    { value: 'Silty', label: 'Silty' },\r\n    { value: 'Peat', label: 'Peat' },\r\n    { value: 'Chalky', label: 'Chalky' }\r\n  ];\r\n\r\n  const seasons = [\r\n    { value: 'Spring', label: 'Spring' },\r\n    { value: 'Summer', label: 'Summer' },\r\n    { value: 'Autumn', label: 'Autumn' },\r\n    { value: 'Winter', label: 'Winter' },\r\n    { value: 'Rainy', label: 'Rainy' },\r\n    { value: 'Dry', label: 'Dry' }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // Check authentication first\r\n    const token = localStorage.getItem('firebaseToken');\r\n    console.log('🔐 Authentication token:', token ? 'Present' : 'Missing');\r\n    \r\n    if (!token) {\r\n      console.error('❌ No authentication token - user needs to login');\r\n      setGlobalError('Please log in to use AI features');\r\n      setNetworkStatus({ \r\n        gemini_available: false,\r\n        error: 'Authentication required'\r\n      });\r\n      return;\r\n    }\r\n\r\n    checkNetworkStatus();\r\n    testRecommendationsAPI();\r\n  }, []);\r\n\r\n  const testRecommendationsAPI = async () => {\r\n    console.log('🧪 Testing Recommendations API...');\r\n    \r\n    try {\r\n      // Test network status\r\n      const network = await recommendationsAPI.getNetworkStatus();\r\n      console.log('Network status test:', network);\r\n      \r\n      // Test Gemini status\r\n      const gemini = await recommendationsAPI.getGeminiStatus();\r\n      console.log('Gemini status test:', gemini);\r\n      \r\n    } catch (error) {\r\n      console.error('Recommendations API test failed:', error);\r\n    }\r\n  };\r\n\r\n  const debugAPI = async () => {\r\n    console.log('🔍 Debugging API calls...');\r\n    \r\n    try {\r\n      console.log('Testing network status endpoint...');\r\n      const result = await recommendationsAPI.getNetworkStatus();\r\n      console.log('Network status result:', result);\r\n      \r\n      console.log('Testing Gemini status endpoint...');\r\n      const geminiResult = await recommendationsAPI.getGeminiStatus();\r\n      console.log('Gemini status result:', geminiResult);\r\n      \r\n    } catch (error) {\r\n      console.error('API debug error:', error);\r\n      console.error('Error details:', {\r\n        message: error.message,\r\n        stack: error.stack,\r\n        response: error.response\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkNetworkStatus = async () => {\r\n    try {\r\n      console.log('🔄 Checking network status...');\r\n      const result = await recommendationsAPI.getNetworkStatus();\r\n      console.log('Network status response:', result);\r\n      \r\n      if (result && result.success) {\r\n        setNetworkStatus(result.data);\r\n      } else {\r\n        console.warn('Failed to get network status:', result?.message || 'No response');\r\n        // TEMPORARY: Force online for testing if API fails\r\n        setNetworkStatus({ \r\n          gemini_available: true,\r\n          network_connectivity: true,\r\n          error: result?.message || 'Network status unavailable',\r\n          note: 'Forced online for testing'\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking network status:', error);\r\n      // TEMPORARY: Force online for testing on error\r\n      setNetworkStatus({ \r\n        gemini_available: true,\r\n        network_connectivity: true,\r\n        error: error.message,\r\n        note: 'Forced online due to error'\r\n      });\r\n    }\r\n  };\r\n\r\n  const validateCropForm = () => {\r\n    const newErrors = {};\r\n\r\n    if (!cropForm.location.trim()) {\r\n      newErrors.location = 'Location is required';\r\n    }\r\n\r\n    if (!cropForm.season) {\r\n      newErrors.season = 'Season is required';\r\n    }\r\n\r\n    const ph = parseFloat(cropForm.ph);\r\n    if (isNaN(ph) || ph < 0 || ph > 14) {\r\n      newErrors.ph = 'Soil pH must be a number between 0 and 14';\r\n    }\r\n\r\n    const temperature = parseFloat(cropForm.temperature);\r\n    if (isNaN(temperature) || temperature < -50 || temperature > 60) {\r\n      newErrors.temperature = 'Temperature must be a number between -50°C and 60°C';\r\n    }\r\n\r\n    const rainfall = parseFloat(cropForm.rainfall);\r\n    if (isNaN(rainfall) || rainfall < 0) {\r\n      newErrors.rainfall = 'Rainfall must be a positive number';\r\n    }\r\n\r\n    if (cropForm.nitrogen) {\r\n      const nitrogen = parseFloat(cropForm.nitrogen);\r\n      if (isNaN(nitrogen) || nitrogen < 0) {\r\n        newErrors.nitrogen = 'Nitrogen must be a positive number';\r\n      }\r\n    }\r\n\r\n    if (cropForm.phosphorus) {\r\n      const phosphorus = parseFloat(cropForm.phosphorus);\r\n      if (isNaN(phosphorus) || phosphorus < 0) {\r\n        newErrors.phosphorus = 'Phosphorus must be a positive number';\r\n      }\r\n    }\r\n\r\n    if (cropForm.potassium) {\r\n      const potassium = parseFloat(cropForm.potassium);\r\n      if (isNaN(potassium) || potassium < 0) {\r\n        newErrors.potassium = 'Potassium must be a positive number';\r\n      }\r\n    }\r\n\r\n    if (cropForm.humidity) {\r\n      const humidity = parseFloat(cropForm.humidity);\r\n      if (isNaN(humidity) || humidity < 0 || humidity > 100) {\r\n        newErrors.humidity = 'Humidity must be a number between 0 and 100';\r\n      }\r\n    }\r\n\r\n    if (cropForm.farmSize) {\r\n      const farmSize = parseFloat(cropForm.farmSize);\r\n      if (isNaN(farmSize) || farmSize < 0) {\r\n        newErrors.farmSize = 'Farm size must be a positive number';\r\n      }\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const validatePriceForm = () => {\r\n    const newErrors = {};\r\n\r\n    if (!priceForm.region.trim()) {\r\n      newErrors.region = 'Region is required';\r\n    }\r\n\r\n    if (!priceForm.cropType.trim()) {\r\n      newErrors.cropType = 'Crop type is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleCropRecommendation = async (e) => {\r\n    e.preventDefault();\r\n    setGlobalError('');\r\n    setErrors({});\r\n\r\n    // Check authentication\r\n    const token = localStorage.getItem('firebaseToken');\r\n    if (!token) {\r\n      setGlobalError('Please log in to use crop recommendations');\r\n      return;\r\n    }\r\n\r\n    if (!validateCropForm()) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const submitData = {\r\n        soilType: cropForm.soilType,\r\n        ph: parseFloat(cropForm.ph),\r\n        temperature: parseFloat(cropForm.temperature),\r\n        rainfall: parseFloat(cropForm.rainfall),\r\n        location: cropForm.location.trim(),\r\n        season: cropForm.season,\r\n        ...(cropForm.farmSize && { farmSize: parseFloat(cropForm.farmSize) }),\r\n        ...(cropForm.previousCrops && { previousCrops: cropForm.previousCrops.trim() }),\r\n        ...(cropForm.nitrogen && { nitrogen: parseFloat(cropForm.nitrogen) }),\r\n        ...(cropForm.phosphorus && { phosphorus: parseFloat(cropForm.phosphorus) }),\r\n        ...(cropForm.potassium && { potassium: parseFloat(cropForm.potassium) }),\r\n        ...(cropForm.humidity && { humidity: parseFloat(cropForm.humidity) }),\r\n      };\r\n\r\n      console.log('🌱 Submitting crop recommendation data:', submitData);\r\n\r\n      const response = await recommendationsAPI.getCropRecommendation(submitData);\r\n      \r\n      // FIXED: Proper response handling\r\n      if (response.data && response.data.success) {\r\n        console.log('✅ Crop recommendation success:', response.data);\r\n        setCropRecommendation(response.data);\r\n      } else {\r\n        console.error('❌ Crop recommendation failed:', response);\r\n        setGlobalError(response.data?.message || 'Failed to get crop recommendations');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting crop recommendation:', error);\r\n      setGlobalError('Failed to get crop recommendations. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handlePricePrediction = async (e) => {\r\n    e.preventDefault();\r\n    setGlobalError('');\r\n    setErrors({});\r\n\r\n    // Check authentication\r\n    const token = localStorage.getItem('firebaseToken');\r\n    if (!token) {\r\n      setGlobalError('Please log in to use price predictions');\r\n      return;\r\n    }\r\n\r\n    if (!validatePriceForm()) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const submitData = {\r\n        cropType: priceForm.cropType,\r\n        region: priceForm.region.trim(),\r\n        predictionPeriod: priceForm.predictionPeriod,\r\n        useGlobal: priceForm.useGlobal\r\n      };\r\n\r\n      console.log('💰 Submitting price prediction data:', submitData);\r\n\r\n      const response = await recommendationsAPI.getPricePrediction(submitData);\r\n      \r\n      // FIXED: Proper response handling\r\n      if (response.data && response.data.success) {\r\n        console.log('✅ Price prediction success:', response.data);\r\n        setPricePrediction(response.data);\r\n      } else {\r\n        console.error('❌ Price prediction failed:', response);\r\n        setGlobalError(response.data?.message || 'Failed to get price prediction');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting price prediction:', error);\r\n      setGlobalError('Failed to get price prediction. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleChatSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Check authentication\r\n    const token = localStorage.getItem('firebaseToken');\r\n    if (!token) {\r\n      setGlobalError('Please log in to use agriculture chat');\r\n      return;\r\n    }\r\n\r\n    if (!chatForm.question.trim()) return;\r\n\r\n    const userMessage = {\r\n      type: 'user',\r\n      content: chatForm.question,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    setChatHistory(prev => [...prev, userMessage]);\r\n    setLoading(true);\r\n    setGlobalError('');\r\n\r\n    try {\r\n      const submitData = {\r\n        question: chatForm.question.trim(),\r\n        user_context: chatForm.user_context\r\n      };\r\n\r\n      console.log('💬 Submitting agriculture chat:', { question: chatForm.question.substring(0, 50) + '...' });\r\n\r\n      const response = await recommendationsAPI.agricultureChat(submitData);\r\n      \r\n      // FIXED: Proper response handling\r\n      if (response.data && response.data.success) {\r\n        console.log('✅ Agriculture chat success');\r\n        const aiMessage = {\r\n          type: 'ai',\r\n          content: response.data.response,\r\n          timestamp: new Date().toISOString(),\r\n          suggested_follow_ups: response.data.suggested_follow_ups\r\n        };\r\n\r\n        setChatHistory(prev => [...prev, aiMessage]);\r\n        setChatForm({ question: '', user_context: {} });\r\n      } else {\r\n        console.error('❌ Agriculture chat failed:', response);\r\n        const errorMessage = {\r\n          type: 'ai',\r\n          content: response.data?.message || \"I'm having trouble connecting right now. Please try again later.\",\r\n          timestamp: new Date().toISOString(),\r\n          isError: true\r\n        };\r\n        setChatHistory(prev => [...prev, errorMessage]);\r\n        setGlobalError(response.data?.message || 'Failed to get response');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in agriculture chat:', error);\r\n      \r\n      if (error.code === 'ECONNABORTED') {\r\n        const timeoutMessage = {\r\n          type: 'ai',\r\n          content: \"The request timed out. This might be due to high demand or network issues. Please try a simpler question or try again later.\",\r\n          timestamp: new Date().toISOString(),\r\n          isError: true\r\n        };\r\n        setChatHistory(prev => [...prev, timeoutMessage]);\r\n        setGlobalError('Request timed out. Please try again with a simpler question.');\r\n      } else {\r\n        const errorMessage = {\r\n          type: 'ai',\r\n          content: \"I'm experiencing technical difficulties. Please try again in a few moments.\",\r\n          timestamp: new Date().toISOString(),\r\n          isError: true\r\n        };\r\n        setChatHistory(prev => [...prev, errorMessage]);\r\n        setGlobalError('Failed to get response. Please check your connection and try again.');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleFollowUpQuestion = (question) => {\r\n    setChatForm(prev => ({ ...prev, question }));\r\n  };\r\n\r\n  const clearErrors = () => {\r\n    setErrors({});\r\n    setGlobalError('');\r\n  };\r\n\r\n  const getFieldError = (fieldName) => {\r\n    return errors[fieldName] ? errors[fieldName][0] : '';\r\n  };\r\n\r\n  const getDemoCropRecommendation = () => {\r\n    return {\r\n      success: true,\r\n      recommendations: [\r\n        {\r\n          crop: \"Maize\",\r\n          confidence: 0.85,\r\n          season: cropForm.season || \"Rainy\",\r\n          soil_type: cropForm.soilType,\r\n          water_requirements: \"Moderate\",\r\n          yield_potential: \"High\",\r\n          benefits: [\r\n            \"Good for crop rotation\",\r\n            \"High market demand\",\r\n            \"Suitable for your soil type\"\r\n          ],\r\n          planting_guidelines: \"Plant after last frost, maintain soil moisture\"\r\n        },\r\n        {\r\n          crop: \"Beans\",\r\n          confidence: 0.78,\r\n          season: cropForm.season || \"Rainy\",\r\n          soil_type: cropForm.soilType,\r\n          water_requirements: \"Low to Moderate\",\r\n          yield_potential: \"Medium\",\r\n          benefits: [\r\n            \"Nitrogen fixing for soil\",\r\n            \"Quick harvest cycle\",\r\n            \"Good companion crop\"\r\n          ],\r\n          planting_guidelines: \"Plant in well-drained soil, provide support for climbing varieties\"\r\n        }\r\n      ],\r\n      ai_analysis: \"Based on your soil conditions and climate, these crops show good compatibility. Consider crop rotation for soil health.\",\r\n      next_steps: {\r\n        immediate_actions: [\r\n          \"Test soil nutrients\",\r\n          \"Prepare planting area\",\r\n          \"Source quality seeds\"\r\n        ],\r\n        short_term_planning: [\r\n          \"Schedule planting dates\",\r\n          \"Plan irrigation\",\r\n          \"Arrange labor\"\r\n        ],\r\n        long_term_considerations: [\r\n          \"Crop rotation schedule\",\r\n          \"Soil improvement plan\",\r\n          \"Market access planning\"\r\n        ]\r\n      },\r\n      is_demo: true\r\n    };\r\n  };\r\n\r\n  const getDemoPricePrediction = () => {\r\n    return {\r\n      success: true,\r\n      crop: priceForm.cropType,\r\n      prediction_period: priceForm.predictionPeriod,\r\n      predicted_price: 28.75,\r\n      confidence: 0.82,\r\n      trend: \"up\",\r\n      predictions: [\r\n        { date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), predicted_price: 27.25 },\r\n        { date: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(), predicted_price: 28.75 },\r\n        { date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), predicted_price: 30.50 }\r\n      ],\r\n      is_demo: true\r\n    };\r\n  };\r\n\r\n  const runDiagnostics = async () => {\r\n    console.log('🔧 Running diagnostics...');\r\n    await debugAPI();\r\n    await checkNetworkStatus();\r\n  };\r\n\r\n  // Determine if we should show online status\r\n  const isAIOnline = networkStatus?.gemini_available && networkStatus?.network_connectivity;\r\n  const showDemoMode = !isAIOnline;\r\n\r\n  return (\r\n    <div className=\"recommendations\">\r\n      <div className=\"recommendations__header\">\r\n        <h1>AI Agriculture Assistant</h1>\r\n        <div className=\"header-actions\">\r\n          <Button \r\n            size=\"small\" \r\n            variant=\"outline\" \r\n            onClick={runDiagnostics}\r\n            title=\"Run Diagnostics\"\r\n          >\r\n            🔧\r\n          </Button>\r\n          {networkStatus && (\r\n            <div className=\"network-status\">\r\n              <span className={`status-indicator ${isAIOnline ? 'online' : 'offline'}`}>\r\n                {isAIOnline ? '🟢 AI Online' : '🔴 AI Offline'}\r\n              </span>\r\n              {networkStatus.error && (\r\n                <span className=\"error-message\">({networkStatus.error})</span>\r\n              )}\r\n              {showDemoMode && (\r\n                <span className=\"demo-mode\">(Using Demo Mode)</span>\r\n              )}\r\n              {networkStatus.note && (\r\n                <span className=\"status-note\">({networkStatus.note})</span>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {globalError && (\r\n        <Card className=\"alert-error\" style={{ marginBottom: '16px', background: '#ffebee', borderColor: '#f44336' }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <span>{globalError}</span>\r\n            <Button size=\"small\" variant=\"text\" onClick={clearErrors}>×</Button>\r\n          </div>\r\n        </Card>\r\n      )}\r\n\r\n      {showDemoMode && !globalError && (\r\n        <Card className=\"alert-info\" style={{ marginBottom: '16px', background: '#e3f2fd', borderColor: '#2196f3' }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <span>\r\n              <strong>Demo Mode:</strong> Using sample data. AI features will work with realistic examples.\r\n            </span>\r\n          </div>\r\n        </Card>\r\n      )}\r\n\r\n      <Tabs\r\n        tabs={[\r\n          { id: 'crop', label: 'Crop Recommendations' },\r\n          { id: 'price', label: 'Price Predictions' },\r\n          { id: 'chat', label: 'AI Assistant' }\r\n        ]}\r\n        activeTab={activeTab}\r\n        onChange={setActiveTab}\r\n      />\r\n\r\n      <div className=\"recommendations__content\">\r\n        {activeTab === 'crop' && (\r\n          <div className=\"crop-recommendations\">\r\n            <Card title=\"Get AI-Powered Crop Recommendations\">\r\n              <form onSubmit={handleCropRecommendation} className=\"crop-form\">\r\n                <div className=\"form-grid\">\r\n                  <Select\r\n                    label=\"Soil Type\"\r\n                    options={soilTypes}\r\n                    value={cropForm.soilType}\r\n                    onChange={(e) => setCropForm(prev => ({ ...prev, soilType: e.target.value }))}\r\n                    required\r\n                  />\r\n                  \r\n                  <Input\r\n                    label=\"Soil pH\"\r\n                    type=\"number\"\r\n                    step=\"0.1\"\r\n                    min=\"0\"\r\n                    max=\"14\"\r\n                    value={cropForm.ph}\r\n                    onChange={(e) => setCropForm(prev => ({ ...prev, ph: e.target.value }))}\r\n                    error={getFieldError('ph')}\r\n                    required\r\n                  />\r\n                  \r\n                  <Input\r\n                    label=\"Temperature (°C)\"\r\n                    type=\"number\"\r\n                    step=\"0.1\"\r\n                    min=\"-50\"\r\n                    max=\"60\"\r\n                    value={cropForm.temperature}\r\n                    onChange={(e) => setCropForm(prev => ({ ...prev, temperature: e.target.value }))}\r\n                    error={getFieldError('temperature')}\r\n                    required\r\n                  />\r\n                  \r\n                  <Input\r\n                    label=\"Rainfall (mm/year)\"\r\n                    type=\"number\"\r\n                    step=\"1\"\r\n                    min=\"0\"\r\n                    value={cropForm.rainfall}\r\n                    onChange={(e) => setCropForm(prev => ({ ...prev, rainfall: e.target.value }))}\r\n                    error={getFieldError('rainfall')}\r\n                    required\r\n                  />\r\n                  \r\n                  <Input\r\n                    label=\"Location/Region\"\r\n                    value={cropForm.location}\r\n                    onChange={(e) => setCropForm(prev => ({ ...prev, location: e.target.value }))}\r\n                    error={getFieldError('location')}\r\n                    required\r\n                  />\r\n                  \r\n                  <Select\r\n                    label=\"Season\"\r\n                    options={seasons}\r\n                    value={cropForm.season}\r\n                    onChange={(e) => setCropForm(prev => ({ ...prev, season: e.target.value }))}\r\n                    error={getFieldError('season')}\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-section\">\r\n                  <h4>Additional Information (Optional)</h4>\r\n                  <div className=\"form-grid\">\r\n                    <Input\r\n                      label=\"Farm Size (acres)\"\r\n                      type=\"number\"\r\n                      step=\"0.01\"\r\n                      min=\"0\"\r\n                      value={cropForm.farmSize}\r\n                      onChange={(e) => setCropForm(prev => ({ ...prev, farmSize: e.target.value }))}\r\n                      error={getFieldError('farmSize')}\r\n                    />\r\n                    <Input\r\n                      label=\"Previous Crops\"\r\n                      value={cropForm.previousCrops}\r\n                      onChange={(e) => setCropForm(prev => ({ ...prev, previousCrops: e.target.value }))}\r\n                      error={getFieldError('previousCrops')}\r\n                    />\r\n                    <Input\r\n                      label=\"Nitrogen (mg/kg)\"\r\n                      type=\"number\"\r\n                      step=\"0.1\"\r\n                      min=\"0\"\r\n                      value={cropForm.nitrogen}\r\n                      onChange={(e) => setCropForm(prev => ({ ...prev, nitrogen: e.target.value }))}\r\n                      error={getFieldError('nitrogen')}\r\n                    />\r\n                    <Input\r\n                      label=\"Phosphorus (mg/kg)\"\r\n                      type=\"number\"\r\n                      step=\"0.1\"\r\n                      min=\"0\"\r\n                      value={cropForm.phosphorus}\r\n                      onChange={(e) => setCropForm(prev => ({ ...prev, phosphorus: e.target.value }))}\r\n                      error={getFieldError('phosphorus')}\r\n                    />\r\n                    <Input\r\n                      label=\"Potassium (mg/kg)\"\r\n                      type=\"number\"\r\n                      step=\"0.1\"\r\n                      min=\"0\"\r\n                      value={cropForm.potassium}\r\n                      onChange={(e) => setCropForm(prev => ({ ...prev, potassium: e.target.value }))}\r\n                      error={getFieldError('potassium')}\r\n                    />\r\n                    <Input\r\n                      label=\"Humidity (%)\"\r\n                      type=\"number\"\r\n                      step=\"0.1\"\r\n                      min=\"0\"\r\n                      max=\"100\"\r\n                      value={cropForm.humidity}\r\n                      onChange={(e) => setCropForm(prev => ({ ...prev, humidity: e.target.value }))}\r\n                      error={getFieldError('humidity')}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"form-actions\">\r\n                  <Button \r\n                    type=\"submit\" \r\n                    variant=\"primary\" \r\n                    loading={loading}\r\n                    disabled={!cropForm.location.trim() || !cropForm.season}\r\n                  >\r\n                    {showDemoMode ? 'Try Demo Data' : 'Get Recommendations'}\r\n                  </Button>\r\n                  {showDemoMode && (\r\n                    <Button \r\n                      type=\"button\" \r\n                      variant=\"outline\"\r\n                      onClick={() => setCropRecommendation(getDemoCropRecommendation())}\r\n                    >\r\n                      Quick Demo\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </form>\r\n            </Card>\r\n\r\n            {cropRecommendation && cropRecommendation.success && (\r\n              <div className=\"recommendation-results\">\r\n                <Card title={`AI Crop Recommendations ${cropRecommendation.is_demo ? '(Demo Data)' : ''}`}>\r\n                  {cropRecommendation.is_demo && (\r\n                    <Card className=\"alert-info\" style={{ marginBottom: '16px', background: '#e3f2fd', borderColor: '#2196f3' }}>\r\n                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <span>Showing demo data. AI service is currently unavailable.</span>\r\n                      </div>\r\n                    </Card>\r\n                  )}\r\n                  <div className=\"recommendations-list\">\r\n                    {cropRecommendation.recommendations?.map((rec, index) => (\r\n                      <div key={index} className=\"recommendation-item\">\r\n                        <div className=\"crop-header\">\r\n                          <h3>{rec.crop}</h3>\r\n                          <span className=\"confidence-score\">\r\n                            {((rec.confidence || 0.8) * 100).toFixed(1)}% match\r\n                          </span>\r\n                        </div>\r\n                        \r\n                        <div className=\"crop-details\">\r\n                          <p><strong>Season:</strong> {rec.season}</p>\r\n                          <p><strong>Soil Type:</strong> {rec.soil_type}</p>\r\n                          <p><strong>Water Needs:</strong> {rec.water_requirements}</p>\r\n                          <p><strong>Yield Potential:</strong> {rec.yield_potential}</p>\r\n                        </div>\r\n\r\n                        <div className=\"crop-benefits\">\r\n                          <h4>Benefits:</h4>\r\n                          <ul>\r\n                            {rec.benefits?.map((benefit, i) => (\r\n                              <li key={i}>{benefit}</li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n\r\n                        {rec.planting_guidelines && (\r\n                          <div className=\"planting-guidelines\">\r\n                            <h4>Planting Guidelines:</h4>\r\n                            <p>{rec.planting_guidelines}</p>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n\r\n                  {cropRecommendation.ai_analysis && (\r\n                    <div className=\"ai-analysis\">\r\n                      <h4>AI Analysis</h4>\r\n                      <div className=\"analysis-content\">\r\n                        {cropRecommendation.ai_analysis}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {cropRecommendation.next_steps && (\r\n                    <div className=\"next-steps\">\r\n                      <h4>Recommended Next Steps</h4>\r\n                      <div className=\"steps-grid\">\r\n                        <div className=\"step-category\">\r\n                          <h5>Immediate Actions</h5>\r\n                          <ul>\r\n                            {cropRecommendation.next_steps.immediate_actions?.map((action, i) => (\r\n                              <li key={i}>{action}</li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                        <div className=\"step-category\">\r\n                          <h5>Short-term Planning</h5>\r\n                          <ul>\r\n                            {cropRecommendation.next_steps.short_term_planning?.map((action, i) => (\r\n                              <li key={i}>{action}</li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                        <div className=\"step-category\">\r\n                          <h5>Long-term Considerations</h5>\r\n                          <ul>\r\n                            {cropRecommendation.next_steps.long_term_considerations?.map((action, i) => (\r\n                              <li key={i}>{action}</li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </Card>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'price' && (\r\n          <div className=\"price-predictions\">\r\n            <Card title=\"AI Price Predictions\">\r\n              <form onSubmit={handlePricePrediction} className=\"price-form\">\r\n                <div className=\"form-grid\">\r\n                  <Select\r\n                    label=\"Crop Type\"\r\n                    options={[\r\n                      { value: '', label: 'Select Crop Type' },\r\n                      { value: 'Maize', label: 'Maize' },\r\n                      { value: 'Rice', label: 'Rice' },\r\n                      { value: 'Beans', label: 'Beans' },\r\n                      { value: 'Cassava', label: 'Cassava' },\r\n                      { value: 'Wheat', label: 'Wheat' },\r\n                      { value: 'Tomatoes', label: 'Tomatoes' },\r\n                      { value: 'Potatoes', label: 'Potatoes' }\r\n                    ]}\r\n                    value={priceForm.cropType}\r\n                    onChange={(e) => setPriceForm(prev => ({ ...prev, cropType: e.target.value }))}\r\n                    error={getFieldError('cropType')}\r\n                    required\r\n                  />\r\n                  \r\n                  <Input\r\n                    label=\"Region/Market\"\r\n                    value={priceForm.region}\r\n                    onChange={(e) => setPriceForm(prev => ({ ...prev, region: e.target.value }))}\r\n                    error={getFieldError('region')}\r\n                    required\r\n                  />\r\n                  \r\n                  <Select\r\n                    label=\"Prediction Period\"\r\n                    options={[\r\n                      { value: '1 Week', label: '1 Week' },\r\n                      { value: '1 Month', label: '1 Month' },\r\n                      { value: '3 Months', label: '3 Months' },\r\n                      { value: '6 Months', label: '6 Months' },\r\n                      { value: '1 Year', label: '1 Year' }\r\n                    ]}\r\n                    value={priceForm.predictionPeriod}\r\n                    onChange={(e) => setPriceForm(prev => ({ ...prev, predictionPeriod: e.target.value }))}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"form-actions\">\r\n                  <Button \r\n                    type=\"submit\" \r\n                    variant=\"primary\" \r\n                    loading={loading}\r\n                    disabled={!priceForm.region.trim() || !priceForm.cropType}\r\n                  >\r\n                    {showDemoMode ? 'Try Demo Data' : 'Get Price Prediction'}\r\n                  </Button>\r\n                  {showDemoMode && (\r\n                    <Button \r\n                      type=\"button\" \r\n                      variant=\"outline\"\r\n                      onClick={() => setPricePrediction(getDemoPricePrediction())}\r\n                    >\r\n                      Quick Demo\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </form>\r\n            </Card>\r\n\r\n            {pricePrediction && pricePrediction.success && (\r\n              <Card title={`Price Prediction Results ${pricePrediction.is_demo ? '(Demo Data)' : ''}`}>\r\n                {pricePrediction.is_demo && (\r\n                  <Card className=\"alert-info\" style={{ marginBottom: '16px', background: '#e3f2fd', borderColor: '#2196f3' }}>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                      <span>Showing demo data. AI service is currently unavailable.</span>\r\n                    </div>\r\n                  </Card>\r\n                )}\r\n                <div className=\"prediction-results\">\r\n                  <div className=\"prediction-header\">\r\n                    <h3>{pricePrediction.crop}</h3>\r\n                    <span className=\"prediction-period\">{pricePrediction.prediction_period}</span>\r\n                  </div>\r\n                  \r\n                  <div className=\"prediction-metrics\">\r\n                    <div className=\"metric-card\">\r\n                      <div className=\"metric-value\">${pricePrediction.predicted_price}</div>\r\n                      <div className=\"metric-label\">Predicted Price</div>\r\n                    </div>\r\n                    <div className=\"metric-card\">\r\n                      <div className=\"metric-value\">{((pricePrediction.confidence || 0.8) * 100).toFixed(1)}%</div>\r\n                      <div className=\"metric-label\">Confidence</div>\r\n                    </div>\r\n                    <div className=\"metric-card\">\r\n                      <div className={`metric-value trend-${pricePrediction.trend}`}>\r\n                        {pricePrediction.trend}\r\n                      </div>\r\n                      <div className=\"metric-label\">Market Trend</div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {pricePrediction.predictions && pricePrediction.predictions.length > 0 && (\r\n                    <div className=\"future-predictions\">\r\n                      <h4>Future Price Projections</h4>\r\n                      <div className=\"predictions-chart\">\r\n                        {pricePrediction.predictions.slice(0, 7).map((pred, index) => (\r\n                          <div key={index} className=\"prediction-day\">\r\n                            <div className=\"prediction-date\">\r\n                              {new Date(pred.date).toLocaleDateString()}\r\n                            </div>\r\n                            <div className=\"prediction-price\">\r\n                              ${pred.predicted_price}\r\n                            </div>\r\n                            <div className=\"prediction-bar\">\r\n                              <div \r\n                                className=\"bar-fill\"\r\n                                style={{ \r\n                                  height: `${(pred.predicted_price / pricePrediction.predicted_price) * 100}%` \r\n                                }}\r\n                              ></div>\r\n                            </div>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div className=\"prediction-insights\">\r\n                    <h4>Market Insights</h4>\r\n                    <div className=\"insights-grid\">\r\n                      <div className=\"insight-item\">\r\n                        <span className=\"insight-label\">Best Time to Buy/Sell:</span>\r\n                        <span className=\"insight-value\">Based on current trends</span>\r\n                      </div>\r\n                      <div className=\"insight-item\">\r\n                        <span className=\"insight-label\">Risk Level:</span>\r\n                        <span className=\"insight-value risk-medium\">Medium</span>\r\n                      </div>\r\n                      <div className=\"insight-item\">\r\n                        <span className=\"insight-label\">Recommendation:</span>\r\n                        <span className=\"insight-value\">\r\n                          {pricePrediction.trend === 'up' ? 'Consider selling later' : 'Good time to buy'}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {activeTab === 'chat' && (\r\n          <div className=\"agriculture-chat\">\r\n            <Card title=\"AI Agriculture Assistant\" className=\"chat-card\">\r\n              <div className=\"chat-container\">\r\n                <div className=\"chat-messages\">\r\n                  {chatHistory.length === 0 ? (\r\n                    <div className=\"welcome-message\">\r\n                      <h3>Hello! I'm your AI Agriculture Assistant 🌱</h3>\r\n                      <p>Ask me anything about farming, crops, soil management, pest control, or market prices.</p>\r\n                      {showDemoMode && (\r\n                        <div className=\"demo-notice\">\r\n                          <p><strong>Demo Mode:</strong> Using sample responses. Real AI features will be available when online.</p>\r\n                        </div>\r\n                      )}\r\n                      <div className=\"suggested-questions\">\r\n                        <h4>Try asking:</h4>\r\n                        <ul>\r\n                          <li>What's the best fertilizer for tomatoes?</li>\r\n                          <li>How do I control pests organically?</li>\r\n                          <li>When should I plant maize in my region?</li>\r\n                          <li>What are the current market prices for beans?</li>\r\n                        </ul>\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    chatHistory.map((message, index) => (\r\n                      <div key={index} className={`chat-message ${message.type}`}>\r\n                        <div className=\"message-content\">\r\n                          {message.content}\r\n                        </div>\r\n                        {message.suggested_follow_ups && message.suggested_follow_ups.length > 0 && (\r\n                          <div className=\"suggested-follow-ups\">\r\n                            <h5>Suggested follow-ups:</h5>\r\n                            <ul>\r\n                              {message.suggested_follow_ups.map((q, i) => (\r\n                                <li key={i}>\r\n                                  <Button\r\n                                    size=\"small\"\r\n                                    variant=\"outline\"\r\n                                    onClick={() => handleFollowUpQuestion(q)}\r\n                                  >\r\n                                    {q}\r\n                                  </Button>\r\n                                </li>\r\n                              ))}\r\n                            </ul>\r\n                          </div>\r\n                        )}\r\n                        {message.isError && (\r\n                          <div className=\"error-message\" style={{ color: '#f44336', marginTop: '8px' }}>\r\n                            Error\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n                <form onSubmit={handleChatSubmit} className=\"chat-input-form\">\r\n                  <TextArea\r\n                    placeholder=\"Type your question...\"\r\n                    value={chatForm.question}\r\n                    onChange={e => setChatForm(prev => ({ ...prev, question: e.target.value }))}\r\n                    rows={2}\r\n                    required\r\n                  />\r\n                  <div className=\"chat-actions\">\r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"primary\"\r\n                      loading={loading}\r\n                      disabled={!chatForm.question.trim()}\r\n                    >\r\n                      Send\r\n                    </Button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recommendations;"],"names":["recommendationsAPI","data","djangoClient","Recommendations","activeTab","setActiveTab","useState","cropRecommendation","setCropRecommendation","pricePrediction","setPricePrediction","chatHistory","setChatHistory","loading","setLoading","networkStatus","setNetworkStatus","errors","setErrors","globalError","setGlobalError","cropForm","setCropForm","priceForm","setPriceForm","chatForm","setChatForm","soilTypes","seasons","useEffect","token","checkNetworkStatus","testRecommendationsAPI","network","gemini","error","debugAPI","result","geminiResult","validateCropForm","newErrors","ph","temperature","rainfall","nitrogen","phosphorus","potassium","humidity","farmSize","validatePriceForm","handleCropRecommendation","e","submitData","response","_a","handlePricePrediction","handleChatSubmit","userMessage","prev","aiMessage","errorMessage","_b","timeoutMessage","handleFollowUpQuestion","question","clearErrors","getFieldError","fieldName","getDemoCropRecommendation","getDemoPricePrediction","runDiagnostics","isAIOnline","showDemoMode","jsxs","jsx","Button","Card","Tabs","Select","Input","rec","index","benefit","i","action","_c","_d","pred","message","q","TextArea"],"mappings":"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"}