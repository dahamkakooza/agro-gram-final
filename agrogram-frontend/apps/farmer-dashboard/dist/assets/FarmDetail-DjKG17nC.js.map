{"version":3,"file":"FarmDetail-DjKG17nC.js","sources":["../../src/pages/FarmDetail.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { farmAPI } from '@agro-gram/api';\r\nimport { Card, Button, LoadingSpinner, Tabs, Modal, Input, Select, TextArea } from '@agro-gram/ui';\r\nimport './FarmDetail.css';\r\n\r\nconst FarmDetail = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [farm, setFarm] = useState(null);\r\n  const [plots, setPlots] = useState([]);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [analytics, setAnalytics] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [showPlotModal, setShowPlotModal] = useState(false);\r\n  const [showTaskModal, setShowTaskModal] = useState(false);\r\n  const [showCropModal, setShowCropModal] = useState(false);\r\n  const [selectedPlot, setSelectedPlot] = useState(null);\r\n  const [plotFormData, setPlotFormData] = useState({\r\n    plot_number: '',\r\n    area: '',\r\n    current_crop: '',\r\n    soil_ph: '',\r\n    soil_moisture: '',\r\n    farm: id\r\n  });\r\n  const [taskFormData, setTaskFormData] = useState({\r\n    title: '',\r\n    description: '',\r\n    task_type: '',\r\n    due_date: '',\r\n    estimated_duration: '',\r\n    priority: 'MEDIUM',\r\n    plot: ''\r\n  });\r\n  const [cropFormData, setCropFormData] = useState({\r\n    crop_name: '',\r\n    variety: '',\r\n    planting_date: '',\r\n    expected_harvest_date: '',\r\n    yield_amount: '',\r\n    market_price: '',\r\n    fertilizer_used: {},\r\n    water_usage: '',\r\n    total_cost: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      fetchFarmData();\r\n    }\r\n  }, [id]);\r\n\r\n  const fetchFarmData = async () => {\r\n    try {\r\n      const [farmResponse, plotsResponse, tasksResponse, analyticsResponse] = await Promise.all([\r\n        farmAPI.getFarm(id),\r\n        farmAPI.getPlots(id),\r\n        farmAPI.getFarmTasks(id),\r\n        farmAPI.getFarmAnalytics(id)\r\n      ]);\r\n\r\n      setFarm(farmResponse.data);\r\n      setPlots(plotsResponse.data.results || plotsResponse.data || []);\r\n      setTasks(tasksResponse.data.tasks || []);\r\n      setAnalytics(analyticsResponse.data.analytics);\r\n    } catch (error) {\r\n      console.error('Error fetching farm data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCreatePlot = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await farmAPI.createPlot(plotFormData);\r\n      setShowPlotModal(false);\r\n      setPlotFormData({\r\n        plot_number: '',\r\n        area: '',\r\n        current_crop: '',\r\n        soil_ph: '',\r\n        soil_moisture: '',\r\n        farm: id\r\n      });\r\n      fetchFarmData();\r\n    } catch (error) {\r\n      console.error('Error creating plot:', error);\r\n    }\r\n  };\r\n\r\n  const handleCreateTask = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await farmAPI.createTask(taskFormData);\r\n      setShowTaskModal(false);\r\n      setTaskFormData({\r\n        title: '',\r\n        description: '',\r\n        task_type: '',\r\n        due_date: '',\r\n        estimated_duration: '',\r\n        priority: 'MEDIUM',\r\n        plot: ''\r\n      });\r\n      fetchFarmData();\r\n    } catch (error) {\r\n      console.error('Error creating task:', error);\r\n    }\r\n  };\r\n\r\n  const handleAddCrop = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await farmAPI.addCropToPlot(selectedPlot.id, cropFormData);\r\n      setShowCropModal(false);\r\n      setCropFormData({\r\n        crop_name: '',\r\n        variety: '',\r\n        planting_date: '',\r\n        expected_harvest_date: '',\r\n        yield_amount: '',\r\n        market_price: '',\r\n        fertilizer_used: {},\r\n        water_usage: '',\r\n        total_cost: ''\r\n      });\r\n      setSelectedPlot(null);\r\n      fetchFarmData();\r\n    } catch (error) {\r\n      console.error('Error adding crop:', error);\r\n    }\r\n  };\r\n\r\n  const handleCompleteTask = async (taskId) => {\r\n    try {\r\n      await farmAPI.completeTask(taskId);\r\n      fetchFarmData();\r\n    } catch (error) {\r\n      console.error('Error completing task:', error);\r\n    }\r\n  };\r\n\r\n  const handleGenerateRecommendations = async () => {\r\n    try {\r\n      const response = await farmAPI.generateRecommendations(id);\r\n      alert('Recommendations generated successfully!');\r\n      console.log('Recommendations:', response.data);\r\n    } catch (error) {\r\n      console.error('Error generating recommendations:', error);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"loading\">\r\n        <LoadingSpinner size=\"large\" />\r\n        <p>Loading farm details...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!farm) {\r\n    return (\r\n      <div className=\"error-page\">\r\n        <h2>Farm not found</h2>\r\n        <Button onClick={() => navigate('/farms')}>Back to Farms</Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"farm-detail\">\r\n      <div className=\"farm-detail__header\">\r\n        <div className=\"farm-detail__info\">\r\n          <h1>{farm.name}</h1>\r\n          <p>{farm.location} ‚Ä¢ {farm.total_area} acres ‚Ä¢ {farm.soil_type_display || farm.soil_type}</p>\r\n          <div className=\"farm-stats\">\r\n            <span>{plots.length} Plots</span>\r\n            <span>{tasks.filter(t => t.status === 'PENDING').length} Pending Tasks</span>\r\n            <span className={`productivity-badge productivity-${farm.productivity_level?.toLowerCase() || 'medium'}`}>\r\n              {farm.productivity_level || 'Medium'} Productivity\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"farm-detail__actions\">\r\n          <Button variant=\"outline\" onClick={() => setShowPlotModal(true)}>\r\n            Add Plot\r\n          </Button>\r\n          <Button variant=\"outline\" onClick={() => setShowTaskModal(true)}>\r\n            Add Task\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleGenerateRecommendations}>\r\n            Get AI Recommendations\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Tabs\r\n        tabs={[\r\n          { id: 'overview', label: 'Overview' },\r\n          { id: 'plots', label: 'Plots' },\r\n          { id: 'tasks', label: 'Tasks' },\r\n          { id: 'analytics', label: 'Analytics' }\r\n        ]}\r\n        activeTab={activeTab}\r\n        onChange={setActiveTab}\r\n      />\r\n\r\n      {activeTab === 'overview' && (\r\n        <div className=\"tab-content\">\r\n          <div className=\"overview-grid\">\r\n            <Card title=\"Farm Description\">\r\n              <p>{farm.description || 'No description provided.'}</p>\r\n            </Card>\r\n            \r\n            <Card title=\"Quick Stats\">\r\n              <div className=\"stats-grid\">\r\n                <div className=\"stat-item\">\r\n                  <h3>{plots.length}</h3>\r\n                  <p>Total Plots</p>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <h3>{plots.filter(p => p.current_crop).length}</h3>\r\n                  <p>Active Crops</p>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <h3>{tasks.filter(t => t.status === 'PENDING').length}</h3>\r\n                  <p>Pending Tasks</p>\r\n                </div>\r\n                <div className=\"stat-item\">\r\n                  <h3>{analytics?.success_rate ? `${(analytics.success_rate * 100).toFixed(1)}%` : 'N/A'}</h3>\r\n                  <p>Success Rate</p>\r\n                </div>\r\n              </div>\r\n            </Card>\r\n          </div>\r\n\r\n          <Card title=\"Recent Activity\">\r\n            <div className=\"activity-list\">\r\n              {tasks.slice(0, 5).map(task => (\r\n                <div key={task.id} className=\"activity-item\">\r\n                  <div className=\"activity-icon\">üìù</div>\r\n                  <div className=\"activity-content\">\r\n                    <p><strong>{task.title}</strong> - Due {new Date(task.due_date).toLocaleDateString()}</p>\r\n                    <small>{task.priority_display} Priority</small>\r\n                  </div>\r\n                  <Button \r\n                    size=\"small\" \r\n                    variant=\"outline\"\r\n                    onClick={() => handleCompleteTask(task.id)}\r\n                  >\r\n                    Complete\r\n                  </Button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {activeTab === 'plots' && (\r\n        <div className=\"tab-content\">\r\n          <div className=\"plots-grid\">\r\n            {plots.map(plot => (\r\n              <Card key={plot.id} className=\"plot-card\">\r\n                <div className=\"plot-card__header\">\r\n                  <h3>Plot {plot.plot_number}</h3>\r\n                  <div className=\"plot-actions\">\r\n                    <Button \r\n                      size=\"small\" \r\n                      variant=\"outline\"\r\n                      onClick={() => {\r\n                        setSelectedPlot(plot);\r\n                        setShowCropModal(true);\r\n                      }}\r\n                    >\r\n                      Add Crop\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"plot-card__info\">\r\n                  <p><strong>Area:</strong> {plot.area} acres</p>\r\n                  <p><strong>Current Crop:</strong> {plot.current_crop || 'None'}</p>\r\n                  <p><strong>Soil pH:</strong> {plot.soil_ph || 'Not set'}</p>\r\n                  <p><strong>Status:</strong> {plot.crop_status_display || plot.crop_status}</p>\r\n                  {plot.days_to_harvest && (\r\n                    <p><strong>Days to Harvest:</strong> {plot.days_to_harvest}</p>\r\n                  )}\r\n                </div>\r\n\r\n                {plot.ai_recommendations && plot.ai_recommendations.length > 0 && (\r\n                  <div className=\"plot-recommendations\">\r\n                    <h4>AI Recommendations</h4>\r\n                    {plot.ai_recommendations.slice(0, 2).map((rec, index) => (\r\n                      <div key={index} className=\"recommendation-item\">\r\n                        <span className={`priority-badge priority-${rec.priority}`}>\r\n                          {rec.priority}\r\n                        </span>\r\n                        <p>{rec.message}</p>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Card>\r\n            ))}\r\n          </div>\r\n\r\n          {plots.length === 0 && (\r\n            <Card className=\"no-plots\">\r\n              <div className=\"no-plots-content\">\r\n                <h3>No Plots Yet</h3>\r\n                <p>Add your first plot to start managing crops.</p>\r\n                <Button variant=\"primary\" onClick={() => setShowPlotModal(true)}>\r\n                  Add First Plot\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {activeTab === 'tasks' && (\r\n        <div className=\"tab-content\">\r\n          <div className=\"tasks-list\">\r\n            {tasks.map(task => (\r\n              <Card key={task.id} className=\"task-card\">\r\n                <div className=\"task-card__content\">\r\n                  <div className=\"task-info\">\r\n                    <h4>{task.title}</h4>\r\n                    <p>{task.description}</p>\r\n                    <div className=\"task-meta\">\r\n                      <span>Due: {new Date(task.due_date).toLocaleDateString()}</span>\r\n                      <span>Type: {task.task_type}</span>\r\n                      <span className={`priority-badge priority-${task.priority?.toLowerCase()}`}>\r\n                        {task.priority_display || task.priority}\r\n                      </span>\r\n                      <span className={`status-badge status-${task.status?.toLowerCase()}`}>\r\n                        {task.status_display || task.status}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"task-actions\">\r\n                    {task.status === 'PENDING' && (\r\n                      <Button \r\n                        variant=\"primary\" \r\n                        size=\"small\"\r\n                        onClick={() => handleCompleteTask(task.id)}\r\n                      >\r\n                        Complete\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n\r\n          {tasks.length === 0 && (\r\n            <Card className=\"no-tasks\">\r\n              <div className=\"no-tasks-content\">\r\n                <h3>No Tasks Yet</h3>\r\n                <p>Create your first task to manage farm operations.</p>\r\n                <Button variant=\"primary\" onClick={() => setShowTaskModal(true)}>\r\n                  Add First Task\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {activeTab === 'analytics' && (\r\n        <div className=\"tab-content\">\r\n          {analytics ? (\r\n            <div className=\"analytics-grid\">\r\n              <Card title=\"Productivity Metrics\">\r\n                <div className=\"metric\">\r\n                  <h3>{(analytics.success_rate * 100).toFixed(1)}%</h3>\r\n                  <p>Success Rate</p>\r\n                </div>\r\n                <div className=\"metric\">\r\n                  <h3>{analytics.average_yield?.toFixed(2) || 'N/A'}</h3>\r\n                  <p>Average Yield</p>\r\n                </div>\r\n                <div className=\"metric\">\r\n                  <h3>{(analytics.efficiency_score * 100).toFixed(1)}%</h3>\r\n                  <p>Efficiency Score</p>\r\n                </div>\r\n              </Card>\r\n\r\n              <Card title=\"Financial Overview\">\r\n                <div className=\"metric\">\r\n                  <h3>${analytics.total_revenue || 0}</h3>\r\n                  <p>Total Revenue</p>\r\n                </div>\r\n                <div className=\"metric\">\r\n                  <h3>${analytics.total_costs || 0}</h3>\r\n                  <p>Total Costs</p>\r\n                </div>\r\n                <div className=\"metric\">\r\n                  <h3>${analytics.net_profit || 0}</h3>\r\n                  <p>Net Profit</p>\r\n                </div>\r\n              </Card>\r\n\r\n              {analytics.improvement_recommendations && analytics.improvement_recommendations.length > 0 && (\r\n                <Card title=\"Improvement Recommendations\">\r\n                  <div className=\"recommendations-list\">\r\n                    {analytics.improvement_recommendations.map((rec, index) => (\r\n                      <div key={index} className=\"recommendation-item\">\r\n                        <h4>{rec.title}</h4>\r\n                        <p>{rec.description}</p>\r\n                        <div className=\"recommendation-actions\">\r\n                          {rec.actions?.map((action, actionIndex) => (\r\n                            <span key={actionIndex} className=\"action-tag\">{action}</span>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </Card>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <Card>\r\n              <div className=\"no-analytics\">\r\n                <h3>No Analytics Data</h3>\r\n                <p>Analytics data will be available after you start adding crops and tasks.</p>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Plot Modal */}\r\n      <Modal\r\n        isOpen={showPlotModal}\r\n        onClose={() => setShowPlotModal(false)}\r\n        title=\"Add New Plot\"\r\n      >\r\n        <form onSubmit={handleCreatePlot} className=\"plot-form\">\r\n          <Input\r\n            label=\"Plot Number\"\r\n            value={plotFormData.plot_number}\r\n            onChange={(e) => setPlotFormData(prev => ({ ...prev, plot_number: e.target.value }))}\r\n            required\r\n          />\r\n          <Input\r\n            label=\"Area (acres)\"\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            value={plotFormData.area}\r\n            onChange={(e) => setPlotFormData(prev => ({ ...prev, area: e.target.value }))}\r\n            required\r\n          />\r\n          <Input\r\n            label=\"Current Crop\"\r\n            value={plotFormData.current_crop}\r\n            onChange={(e) => setPlotFormData(prev => ({ ...prev, current_crop: e.target.value }))}\r\n          />\r\n          <div className=\"form-row\">\r\n            <Input\r\n              label=\"Soil pH\"\r\n              type=\"number\"\r\n              step=\"0.1\"\r\n              min=\"0\"\r\n              max=\"14\"\r\n              value={plotFormData.soil_ph}\r\n              onChange={(e) => setPlotFormData(prev => ({ ...prev, soil_ph: e.target.value }))}\r\n            />\r\n            <Input\r\n              label=\"Soil Moisture %\"\r\n              type=\"number\"\r\n              step=\"0.1\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={plotFormData.soil_moisture}\r\n              onChange={(e) => setPlotFormData(prev => ({ ...prev, soil_moisture: e.target.value }))}\r\n            />\r\n          </div>\r\n          <div className=\"form-actions\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={() => setShowPlotModal(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" variant=\"primary\">\r\n              Add Plot\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n\r\n      {/* Task Modal */}\r\n      <Modal\r\n        isOpen={showTaskModal}\r\n        onClose={() => setShowTaskModal(false)}\r\n        title=\"Add New Task\"\r\n      >\r\n        <form onSubmit={handleCreateTask} className=\"task-form\">\r\n          <Input\r\n            label=\"Task Title\"\r\n            value={taskFormData.title}\r\n            onChange={(e) => setTaskFormData(prev => ({ ...prev, title: e.target.value }))}\r\n            required\r\n          />\r\n          <TextArea\r\n            label=\"Description\"\r\n            value={taskFormData.description}\r\n            onChange={(e) => setTaskFormData(prev => ({ ...prev, description: e.target.value }))}\r\n            rows={3}\r\n          />\r\n          <Input\r\n            label=\"Task Type\"\r\n            value={taskFormData.task_type}\r\n            onChange={(e) => setTaskFormData(prev => ({ ...prev, task_type: e.target.value }))}\r\n            required\r\n          />\r\n          <Input\r\n            label=\"Due Date\"\r\n            type=\"date\"\r\n            value={taskFormData.due_date}\r\n            onChange={(e) => setTaskFormData(prev => ({ ...prev, due_date: e.target.value }))}\r\n            required\r\n          />\r\n          <Input\r\n            label=\"Estimated Duration (hours)\"\r\n            type=\"number\"\r\n            value={taskFormData.estimated_duration}\r\n            onChange={(e) => setTaskFormData(prev => ({ ...prev, estimated_duration: e.target.value }))}\r\n          />\r\n          <Select\r\n            label=\"Priority\"\r\n            options={[\r\n              { value: 'LOW', label: 'Low' },\r\n              { value: 'MEDIUM', label: 'Medium' },\r\n              { value: 'HIGH', label: 'High' },\r\n              { value: 'URGENT', label: 'Urgent' }\r\n            ]}\r\n            value={taskFormData.priority}\r\n            onChange={(e) => setTaskFormData(prev => ({ ...prev, priority: e.target.value }))}\r\n          />\r\n          <Select\r\n            label=\"Plot (Optional)\"\r\n            options={plots.map(plot => ({ value: plot.id, label: `Plot ${plot.plot_number}` }))}\r\n            value={taskFormData.plot}\r\n            onChange={(e) => setTaskFormData(prev => ({ ...prev, plot: e.target.value }))}\r\n          />\r\n          <div className=\"form-actions\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={() => setShowTaskModal(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" variant=\"primary\">\r\n              Add Task\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n\r\n      {/* Crop Modal */}\r\n      <Modal\r\n        isOpen={showCropModal}\r\n        onClose={() => {\r\n          setShowCropModal(false);\r\n          setSelectedPlot(null);\r\n        }}\r\n        title={`Add Crop to Plot ${selectedPlot?.plot_number}`}\r\n      >\r\n        <form onSubmit={handleAddCrop} className=\"crop-form\">\r\n          <Input\r\n            label=\"Crop Name\"\r\n            value={cropFormData.crop_name}\r\n            onChange={(e) => setCropFormData(prev => ({ ...prev, crop_name: e.target.value }))}\r\n            required\r\n          />\r\n          <Input\r\n            label=\"Variety\"\r\n            value={cropFormData.variety}\r\n            onChange={(e) => setCropFormData(prev => ({ ...prev, variety: e.target.value }))}\r\n          />\r\n          <div className=\"form-row\">\r\n            <Input\r\n              label=\"Planting Date\"\r\n              type=\"date\"\r\n              value={cropFormData.planting_date}\r\n              onChange={(e) => setCropFormData(prev => ({ ...prev, planting_date: e.target.value }))}\r\n              required\r\n            />\r\n            <Input\r\n              label=\"Expected Harvest Date\"\r\n              type=\"date\"\r\n              value={cropFormData.expected_harvest_date}\r\n              onChange={(e) => setCropFormData(prev => ({ ...prev, expected_harvest_date: e.target.value }))}\r\n            />\r\n          </div>\r\n          <div className=\"form-row\">\r\n            <Input\r\n              label=\"Expected Yield\"\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              value={cropFormData.yield_amount}\r\n              onChange={(e) => setCropFormData(prev => ({ ...prev, yield_amount: e.target.value }))}\r\n            />\r\n            <Input\r\n              label=\"Market Price\"\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              value={cropFormData.market_price}\r\n              onChange={(e) => setCropFormData(prev => ({ ...prev, market_price: e.target.value }))}\r\n            />\r\n          </div>\r\n          <div className=\"form-row\">\r\n            <Input\r\n              label=\"Water Usage (liters)\"\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              value={cropFormData.water_usage}\r\n              onChange={(e) => setCropFormData(prev => ({ ...prev, water_usage: e.target.value }))}\r\n            />\r\n            <Input\r\n              label=\"Total Cost\"\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              value={cropFormData.total_cost}\r\n              onChange={(e) => setCropFormData(prev => ({ ...prev, total_cost: e.target.value }))}\r\n            />\r\n          </div>\r\n          <div className=\"form-actions\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={() => {\r\n              setShowCropModal(false);\r\n              setSelectedPlot(null);\r\n            }}>\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" variant=\"primary\">\r\n              Add Crop\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FarmDetail;"],"names":["FarmDetail","id","useParams","navigate","useNavigate","farm","setFarm","useState","plots","setPlots","tasks","setTasks","analytics","setAnalytics","loading","setLoading","activeTab","setActiveTab","showPlotModal","setShowPlotModal","showTaskModal","setShowTaskModal","showCropModal","setShowCropModal","selectedPlot","setSelectedPlot","plotFormData","setPlotFormData","taskFormData","setTaskFormData","cropFormData","setCropFormData","useEffect","fetchFarmData","farmResponse","plotsResponse","tasksResponse","analyticsResponse","farmAPI","error","handleCreatePlot","e","handleCreateTask","handleAddCrop","handleCompleteTask","taskId","handleGenerateRecommendations","response","jsxs","jsx","LoadingSpinner","t","_a","Button","Tabs","Card","p","task","plot","rec","index","_b","action","actionIndex","Modal","Input","prev","TextArea","Select"],"mappings":"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"}