{"version":3,"file":"Messages-CpJQMAgX.js","sources":["../../src/pages/Messages.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { messagingAPI } from '@agro-gram/api';\r\nimport { Card, Button, LoadingSpinner, Input, TextArea, Alert } from '@agro-gram/ui';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Messages.css';\r\n\r\nconst Messages = () => {\r\n  const [conversations, setConversations] = useState([]);\r\n  const [selectedConversation, setSelectedConversation] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [messagesLoading, setMessagesLoading] = useState(false);\r\n  const [sendingMessage, setSendingMessage] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetchConversations();\r\n  }, []);\r\n\r\n  const fetchConversations = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n    try {\r\n      const result = await messagingAPI.getConversations();\r\n      if (result.success) {\r\n        setConversations(result.data.conversations || result.data || []);\r\n      } else {\r\n        setError(result.message || 'Failed to load conversations');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching conversations:', error);\r\n      setError('Failed to load conversations');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchMessages = async (conversationId) => {\r\n    setMessagesLoading(true);\r\n    setError('');\r\n    try {\r\n      const result = await messagingAPI.getMessages(conversationId);\r\n      if (result.success) {\r\n        setMessages(result.data.messages || result.data || []);\r\n        \r\n        // Mark this conversation as selected\r\n        const conversation = conversations.find(conv => conv.id === conversationId);\r\n        setSelectedConversation(conversation);\r\n      } else {\r\n        setError(result.message || 'Failed to load messages');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error);\r\n      setError('Failed to load messages');\r\n    } finally {\r\n      setMessagesLoading(false);\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!newMessage.trim() || !selectedConversation) {\r\n      setError('Please enter a message');\r\n      return;\r\n    }\r\n\r\n    setSendingMessage(true);\r\n    setError('');\r\n\r\n    try {\r\n      const result = await messagingAPI.sendReply(selectedConversation.id, {\r\n        message: newMessage\r\n      });\r\n\r\n      if (result.success) {\r\n        setNewMessage('');\r\n        // Refresh messages to show the new one\r\n        fetchMessages(selectedConversation.id);\r\n        // Refresh conversations to update last message\r\n        fetchConversations();\r\n        setSuccess('Message sent!');\r\n        setTimeout(() => setSuccess(''), 3000);\r\n      } else {\r\n        setError(result.message || 'Failed to send message');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      setError('Failed to send message');\r\n    } finally {\r\n      setSendingMessage(false);\r\n    }\r\n  };\r\n\r\n  const handleViewProduct = (productId) => {\r\n    console.log('View Product clicked with ID:', productId);\r\n    \r\n    if (productId && productId !== 'undefined' && productId !== 'null') {\r\n      // Ensure we're navigating to the correct product page\r\n      const productUrl = `/marketplace/product/${productId}`;\r\n      console.log('Navigating to:', productUrl);\r\n      navigate(productUrl);\r\n    } else {\r\n      console.error('Invalid product ID:', productId);\r\n      setError('Product information is not available. The product may have been removed.');\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffTime = Math.abs(now - date);\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n    if (diffDays === 1) {\r\n      return 'Yesterday';\r\n    } else if (diffDays > 1) {\r\n      return date.toLocaleDateString();\r\n    } else {\r\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"messages-loading\">\r\n        <LoadingSpinner size=\"large\" />\r\n        <p>Loading messages...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"messages-page\">\r\n      <div className=\"messages-header\">\r\n        <h1>Messages</h1>\r\n        <Button variant=\"outline\" onClick={fetchConversations}>\r\n          Refresh\r\n        </Button>\r\n      </div>\r\n\r\n      {error && (\r\n        <Alert type=\"error\" onClose={() => setError('')}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {success && (\r\n        <Alert type=\"success\" onClose={() => setSuccess('')}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n\r\n      <div className=\"messages-container\">\r\n        {/* Conversations List */}\r\n        <div className=\"conversations-sidebar\">\r\n          <h3>Conversations</h3>\r\n          {conversations.length === 0 ? (\r\n            <Card className=\"no-conversations\">\r\n              <div className=\"no-conversations-content\">\r\n                <h4>No conversations yet</h4>\r\n                <p>When buyers contact you about your products, conversations will appear here.</p>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <div className=\"conversations-list\">\r\n              {conversations.map(conversation => (\r\n                <Card \r\n                  key={conversation.id}\r\n                  className={`conversation-item ${selectedConversation?.id === conversation.id ? 'active' : ''}`}\r\n                  onClick={() => fetchMessages(conversation.id)}\r\n                >\r\n                  <div className=\"conversation-header\">\r\n                    <div className=\"conversation-product\">\r\n                      <strong>{conversation.product_details?.title || 'Product'}</strong>\r\n                      {conversation.product_details?.id && (\r\n                        <small>ID: {conversation.product_details.id}</small>\r\n                      )}\r\n                    </div>\r\n                    {conversation.unread_count > 0 && (\r\n                      <span className=\"unread-badge\">{conversation.unread_count}</span>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"conversation-parties\">\r\n                    <span className=\"buyer\">Buyer: {conversation.buyer_name || conversation.buyer_email}</span>\r\n                    <span className=\"seller\">Seller: {conversation.seller_name || conversation.seller_email}</span>\r\n                  </div>\r\n\r\n                  {conversation.last_message && (\r\n                    <div className=\"last-message\">\r\n                      <p>{conversation.last_message.content}</p>\r\n                      <span className=\"message-time\">\r\n                        {formatDate(conversation.last_message.created_at)}\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div className=\"conversation-status\">\r\n                    <span className={`status status-${conversation.status?.toLowerCase()}`}>\r\n                      {conversation.status}\r\n                    </span>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Messages Area */}\r\n        <div className=\"messages-area\">\r\n          {!selectedConversation ? (\r\n            <Card className=\"no-conversation-selected\">\r\n              <div className=\"select-conversation-prompt\">\r\n                <h3>Select a conversation</h3>\r\n                <p>Choose a conversation from the list to view and send messages.</p>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <>\r\n              {/* Conversation Header */}\r\n              <Card className=\"conversation-header-card\">\r\n                <div className=\"conversation-info\">\r\n                  <h3>{selectedConversation.product_details?.title || 'Product'}</h3>\r\n                  <div className=\"conversation-meta\">\r\n                    <span>Buyer: {selectedConversation.buyer_name || selectedConversation.buyer_email}</span>\r\n                    <span>Seller: {selectedConversation.seller_name || selectedConversation.seller_email}</span>\r\n                    <span className={`conversation-status status-${selectedConversation.status?.toLowerCase()}`}>\r\n                      {selectedConversation.status}\r\n                    </span>\r\n                    {selectedConversation.product_details?.id && (\r\n                      <span className=\"product-id\">Product ID: {selectedConversation.product_details.id}</span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <Button \r\n                  variant=\"outline\" \r\n                  onClick={() => handleViewProduct(selectedConversation.product_details?.id)}\r\n                  disabled={!selectedConversation.product_details?.id}\r\n                >\r\n                  {selectedConversation.product_details?.id ? 'View Product' : 'Product Unavailable'}\r\n                </Button>\r\n              </Card>\r\n\r\n              {/* Messages List */}\r\n              <Card className=\"messages-list-card\">\r\n                {messagesLoading ? (\r\n                  <div className=\"messages-loading\">\r\n                    <LoadingSpinner size=\"medium\" />\r\n                    <p>Loading messages...</p>\r\n                  </div>\r\n                ) : messages.length === 0 ? (\r\n                  <div className=\"no-messages\">\r\n                    <p>No messages yet. Start the conversation!</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"messages-list\">\r\n                    {messages.map(message => (\r\n                      <div \r\n                        key={message.id} \r\n                        className={`message ${message.sender_email === selectedConversation.seller_email ? 'sent' : 'received'}`}\r\n                      >\r\n                        <div className=\"message-header\">\r\n                          <span className=\"sender-name\">\r\n                            {message.sender_name || message.sender_email}\r\n                          </span>\r\n                          <span className=\"message-time\">\r\n                            {formatDate(message.created_at)}\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"message-content\">\r\n                          <p>{message.content}</p>\r\n                          {message.message_type !== 'TEXT' && (\r\n                            <span className=\"message-type\">{message.message_type}</span>\r\n                          )}\r\n                          {message.quantity && message.quantity > 1 && (\r\n                            <div className=\"message-quantity\">\r\n                              Quantity: {message.quantity}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Card>\r\n\r\n              {/* Message Input */}\r\n              <Card className=\"message-input-card\">\r\n                <form onSubmit={sendMessage} className=\"message-form\">\r\n                  <div className=\"message-input-container\">\r\n                    <TextArea\r\n                      value={newMessage}\r\n                      onChange={(e) => setNewMessage(e.target.value)}\r\n                      placeholder=\"Type your message...\"\r\n                      rows={3}\r\n                      disabled={sendingMessage}\r\n                    />\r\n                    <Button \r\n                      type=\"submit\" \r\n                      variant=\"primary\"\r\n                      loading={sendingMessage}\r\n                      disabled={!newMessage.trim()}\r\n                    >\r\n                      Send\r\n                    </Button>\r\n                  </div>\r\n                </form>\r\n              </Card>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;"],"names":["Messages","conversations","setConversations","useState","selectedConversation","setSelectedConversation","messages","setMessages","newMessage","setNewMessage","loading","setLoading","messagesLoading","setMessagesLoading","sendingMessage","setSendingMessage","error","setError","success","setSuccess","navigate","useNavigate","useEffect","fetchConversations","result","messagingAPI","fetchMessages","conversationId","conversation","conv","sendMessage","handleViewProduct","productId","productUrl","formatDate","dateString","date","diffTime","diffDays","jsxs","jsx","LoadingSpinner","Button","Alert","Card","_a","_b","_c","Fragment","_d","_e","message","TextArea"],"mappings":"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"}