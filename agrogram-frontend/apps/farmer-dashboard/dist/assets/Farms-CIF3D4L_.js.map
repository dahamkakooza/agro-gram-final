{"version":3,"file":"Farms-CIF3D4L_.js","sources":["../../src/pages/Farms.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport { farmAPI, apiUtils } from '@agro-gram/api';\r\nimport { Card, Button, LoadingSpinner, Modal, Input, Select, TextArea } from '@agro-gram/ui';\r\nimport './Farms.css';\r\n\r\nconst Farms = () => {\r\n  const [farms, setFarms] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showCreateModal, setShowCreateModal] = useState(false);\r\n  const [showPlotModal, setShowPlotModal] = useState(false);\r\n  const [selectedFarm, setSelectedFarm] = useState(null);\r\n  const [formErrors, setFormErrors] = useState({});\r\n  const [plotFormErrors, setPlotFormErrors] = useState({});\r\n  const [submitLoading, setSubmitLoading] = useState(false);\r\n  const [plotSubmitLoading, setPlotSubmitLoading] = useState(false);\r\n  const [globalError, setGlobalError] = useState('');\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    location: '',\r\n    total_area: '',\r\n    soil_type: '',\r\n    description: '',\r\n    latitude: '',\r\n    longitude: ''\r\n  });\r\n  const [plotFormData, setPlotFormData] = useState({\r\n    plot_number: '',\r\n    area: '',\r\n    current_crop: '',\r\n    soil_ph: '',\r\n    soil_moisture: '',\r\n    farm: ''\r\n  });\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n\r\n  const soilTypes = [\r\n    { value: 'LOAMY', label: 'Loamy' },\r\n    { value: 'CLAY', label: 'Clay' },\r\n    { value: 'SANDY', label: 'Sandy' },\r\n    { value: 'SILTY', label: 'Silty' },\r\n    { value: 'PEAT', label: 'Peat' },\r\n    { value: 'CHALKY', label: 'Chalky' }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    fetchFarms();\r\n    const action = searchParams.get('action');\r\n    if (action === 'create') {\r\n      setShowCreateModal(true);\r\n    } else if (action === 'add-crop') {\r\n      setShowPlotModal(true);\r\n    }\r\n  }, [searchParams]);\r\n\r\n  const fetchFarms = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const result = await farmAPI.getFarms();\r\n      console.log('Farms API Response:', result); // Debug log\r\n      \r\n      // FIXED: Handle the nested response structure properly\r\n      let farmsData = [];\r\n      \r\n      if (result.success) {\r\n        // Handle the nested structure: result.data.data.results\r\n        if (result.data && result.data.data && Array.isArray(result.data.data.results)) {\r\n          farmsData = result.data.data.results;\r\n        } \r\n        // Handle alternative structure: result.data.results\r\n        else if (result.data && Array.isArray(result.data.results)) {\r\n          farmsData = result.data.results;\r\n        }\r\n        // Handle direct array in data\r\n        else if (result.data && Array.isArray(result.data)) {\r\n          farmsData = result.data;\r\n        }\r\n        // Handle direct array\r\n        else if (Array.isArray(result.data)) {\r\n          farmsData = result.data;\r\n        }\r\n        // Handle array in nested data property\r\n        else if (result.data && result.data.data && Array.isArray(result.data.data)) {\r\n          farmsData = result.data.data;\r\n        }\r\n        else {\r\n          console.warn('Unexpected farms response structure:', result);\r\n          farmsData = [];\r\n        }\r\n      } else {\r\n        setGlobalError(result.message || 'Failed to load farms');\r\n        farmsData = [];\r\n      }\r\n      \r\n      setFarms(farmsData);\r\n    } catch (error) {\r\n      console.error('Error fetching farms:', error);\r\n      setGlobalError('Failed to load farms. Please try again.');\r\n      setFarms([]); // Ensure farms is always an array\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCreateFarm = async (e) => {\r\n    e.preventDefault();\r\n    setSubmitLoading(true);\r\n    setFormErrors({});\r\n    setGlobalError('');\r\n\r\n    try {\r\n      const submitData = {\r\n        ...formData,\r\n        total_area: formData.total_area ? parseFloat(formData.total_area) : undefined,\r\n        latitude: formData.latitude ? parseFloat(formData.latitude) : undefined,\r\n        longitude: formData.longitude ? parseFloat(formData.longitude) : undefined,\r\n      };\r\n\r\n      const result = await farmAPI.createFarm(submitData);\r\n      \r\n      if (result.success) {\r\n        setShowCreateModal(false);\r\n        setFormData({\r\n          name: '',\r\n          location: '',\r\n          total_area: '',\r\n          soil_type: '',\r\n          description: '',\r\n          latitude: '',\r\n          longitude: ''\r\n        });\r\n        fetchFarms(); // Refresh the farms list\r\n      } else {\r\n        if (apiUtils.isValidationError(result)) {\r\n          setFormErrors(apiUtils.getFieldErrors(result));\r\n        } else {\r\n          setGlobalError(apiUtils.formatErrorForDisplay(result));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating farm:', error);\r\n      setGlobalError('Failed to create farm. Please try again.');\r\n    } finally {\r\n      setSubmitLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCreatePlot = async (e) => {\r\n    e.preventDefault();\r\n    setPlotSubmitLoading(true);\r\n    setPlotFormErrors({});\r\n    setGlobalError('');\r\n\r\n    try {\r\n      const submitData = {\r\n        ...plotFormData,\r\n        area: plotFormData.area ? parseFloat(plotFormData.area) : undefined,\r\n        soil_ph: plotFormData.soil_ph ? parseFloat(plotFormData.soil_ph) : undefined,\r\n        soil_moisture: plotFormData.soil_moisture ? parseFloat(plotFormData.soil_moisture) : undefined,\r\n        farm: parseInt(plotFormData.farm),\r\n      };\r\n\r\n      const result = await farmAPI.createPlot(submitData);\r\n      \r\n      if (result.success) {\r\n        setShowPlotModal(false);\r\n        setPlotFormData({\r\n          plot_number: '',\r\n          area: '',\r\n          current_crop: '',\r\n          soil_ph: '',\r\n          soil_moisture: '',\r\n          farm: ''\r\n        });\r\n        fetchFarms(); // Refresh the farms list\r\n      } else {\r\n        if (apiUtils.isValidationError(result)) {\r\n          setPlotFormErrors(apiUtils.getFieldErrors(result));\r\n        } else {\r\n          setGlobalError(apiUtils.formatErrorForDisplay(result));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating plot:', error);\r\n      setGlobalError('Failed to create plot. Please try again.');\r\n    } finally {\r\n      setPlotSubmitLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteFarm = async (farmId) => {\r\n    if (window.confirm('Are you sure you want to delete this farm? This action cannot be undone.')) {\r\n      try {\r\n        const result = await farmAPI.deleteFarm(farmId);\r\n        if (result.success) {\r\n          fetchFarms();\r\n        } else {\r\n          setGlobalError(result.message || 'Failed to delete farm');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error deleting farm:', error);\r\n        setGlobalError('Failed to delete farm. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleViewFarm = (farmId) => {\r\n    navigate(`/farms/${farmId}`);\r\n  };\r\n\r\n  const handleAddPlot = (farmId) => {\r\n    setSelectedFarm(farmId);\r\n    setPlotFormData(prev => ({ ...prev, farm: farmId.toString() }));\r\n    setPlotFormErrors({});\r\n    setShowPlotModal(true);\r\n  };\r\n\r\n  const handleCloseCreateModal = () => {\r\n    setShowCreateModal(false);\r\n    setFormData({\r\n      name: '',\r\n      location: '',\r\n      total_area: '',\r\n      soil_type: '',\r\n      description: '',\r\n      latitude: '',\r\n      longitude: ''\r\n    });\r\n    setFormErrors({});\r\n  };\r\n\r\n  const handleClosePlotModal = () => {\r\n    setShowPlotModal(false);\r\n    setPlotFormData({\r\n      plot_number: '',\r\n      area: '',\r\n      current_crop: '',\r\n      soil_ph: '',\r\n      soil_moisture: '',\r\n      farm: ''\r\n    });\r\n    setPlotFormErrors({});\r\n  };\r\n\r\n  const getFieldError = (fieldName, errors) => {\r\n    return errors[fieldName] ? errors[fieldName][0] : '';\r\n  };\r\n\r\n  // FIXED: Safe array access for farm plots\r\n  const getFarmPlots = (farm) => {\r\n    if (!farm) return [];\r\n    \r\n    if (Array.isArray(farm.plots)) {\r\n      return farm.plots;\r\n    } else if (Array.isArray(farm.plots_list)) {\r\n      return farm.plots_list;\r\n    } else if (Array.isArray(farm.plot_set)) {\r\n      return farm.plot_set;\r\n    }\r\n    \r\n    return [];\r\n  };\r\n\r\n  // FIXED: Safe property access with fallbacks\r\n  const getFarmProperty = (farm, property, fallback = '') => {\r\n    if (!farm) return fallback;\r\n    return farm[property] !== undefined ? farm[property] : fallback;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"loading\">\r\n        <LoadingSpinner size=\"large\" />\r\n        <p>Loading farms...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // FIXED: Ensure farms is always treated as an array\r\n  const farmsArray = Array.isArray(farms) ? farms : [];\r\n\r\n  return (\r\n    <div className=\"farms-page\">\r\n      <div className=\"farms-header\">\r\n        <h1>My Farms</h1>\r\n        <Button variant=\"primary\" onClick={() => setShowCreateModal(true)}>\r\n          Add New Farm\r\n        </Button>\r\n      </div>\r\n\r\n      {globalError && (\r\n        <Card className=\"alert-error\" style={{ marginBottom: '16px', background: '#ffebee', borderColor: '#f44336' }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <span>{globalError}</span>\r\n            <Button size=\"small\" variant=\"text\" onClick={() => setGlobalError('')}>Ã—</Button>\r\n          </div>\r\n        </Card>\r\n      )}\r\n\r\n      {farmsArray.length === 0 ? (\r\n        <Card className=\"no-farms-card\">\r\n          <div className=\"no-farms-content\">\r\n            <h3>No Farms Yet</h3>\r\n            <p>Start by creating your first farm to manage your agricultural operations.</p>\r\n            <Button variant=\"primary\" onClick={() => setShowCreateModal(true)}>\r\n              Create Your First Farm\r\n            </Button>\r\n          </div>\r\n        </Card>\r\n      ) : (\r\n        <div className=\"farms-grid\">\r\n          {farmsArray.map(farm => {\r\n            const farmPlots = getFarmPlots(farm);\r\n            const plotsCount = farmPlots.length;\r\n            \r\n            return (\r\n              <Card key={farm.id} className=\"farm-card\">\r\n                <div className=\"farm-card__header\">\r\n                  <h3>{getFarmProperty(farm, 'name', 'Unnamed Farm')}</h3>\r\n                  <div className=\"farm-actions\">\r\n                    <Button size=\"small\" variant=\"outline\" onClick={() => handleViewFarm(farm.id)}>\r\n                      View\r\n                    </Button>\r\n                    <Button size=\"small\" variant=\"outline\" onClick={() => handleAddPlot(farm.id)}>\r\n                      Add Plot\r\n                    </Button>\r\n                    <Button size=\"small\" variant=\"danger\" onClick={() => handleDeleteFarm(farm.id)}>\r\n                      Delete\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"farm-card__info\">\r\n                  <p><strong>Location:</strong> {getFarmProperty(farm, 'location', 'Not specified')}</p>\r\n                  <p><strong>Area:</strong> {getFarmProperty(farm, 'total_area', 0)} acres</p>\r\n                  <p><strong>Soil Type:</strong> {getFarmProperty(farm, 'soil_type_display') || getFarmProperty(farm, 'soil_type', 'Not specified')}</p>\r\n                  <p><strong>Plots:</strong> {plotsCount}</p>\r\n                  <p><strong>Productivity:</strong> \r\n                    <span className={`productivity-badge productivity-${(getFarmProperty(farm, 'productivity_level', 'medium') || 'medium').toLowerCase()}`}>\r\n                      {getFarmProperty(farm, 'productivity_level', 'Medium')}\r\n                    </span>\r\n                  </p>\r\n                </div>\r\n\r\n                {plotsCount > 0 && (\r\n                  <div className=\"farm-plots\">\r\n                    <h4>Plots</h4>\r\n                    {farmPlots.slice(0, 3).map(plot => (\r\n                      <div key={plot.id} className=\"plot-item\">\r\n                        <span>Plot {getFarmProperty(plot, 'plot_number', 'N/A')} - {getFarmProperty(plot, 'area', 0)} acres</span>\r\n                        {plot.current_crop && (\r\n                          <span className=\"crop-badge\">{getFarmProperty(plot, 'current_crop')}</span>\r\n                        )}\r\n                      </div>\r\n                    ))}\r\n                    {plotsCount > 3 && (\r\n                      <p className=\"more-plots\">+{plotsCount - 3} more plots</p>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </Card>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {/* Create Farm Modal */}\r\n      <Modal\r\n        isOpen={showCreateModal}\r\n        onClose={handleCloseCreateModal}\r\n        title=\"Create New Farm\"\r\n      >\r\n        <form onSubmit={handleCreateFarm} className=\"farm-form\">\r\n          {globalError && (\r\n            <Card className=\"alert-error\" style={{ marginBottom: '16px', background: '#ffebee', borderColor: '#f44336' }}>\r\n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <span>{globalError}</span>\r\n                <Button size=\"small\" variant=\"text\" onClick={() => setGlobalError('')}>Ã—</Button>\r\n              </div>\r\n            </Card>\r\n          )}\r\n          \r\n          <Input\r\n            label=\"Farm Name\"\r\n            value={formData.name}\r\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\r\n            error={getFieldError('name', formErrors)}\r\n            required\r\n          />\r\n          <Input\r\n            label=\"Location\"\r\n            value={formData.location}\r\n            onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}\r\n            error={getFieldError('location', formErrors)}\r\n            required\r\n          />\r\n          <Input\r\n            label=\"Total Area (acres)\"\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            min=\"0.01\"\r\n            value={formData.total_area}\r\n            onChange={(e) => setFormData(prev => ({ ...prev, total_area: e.target.value }))}\r\n            error={getFieldError('total_area', formErrors)}\r\n            required\r\n          />\r\n          <Select\r\n            label=\"Soil Type\"\r\n            options={soilTypes}\r\n            value={formData.soil_type}\r\n            onChange={(e) => setFormData(prev => ({ ...prev, soil_type: e.target.value }))}\r\n            error={getFieldError('soil_type', formErrors)}\r\n          />\r\n          <TextArea\r\n            label=\"Description\"\r\n            value={formData.description}\r\n            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\r\n            error={getFieldError('description', formErrors)}\r\n            rows={3}\r\n          />\r\n          <div className=\"form-row\">\r\n            <Input\r\n              label=\"Latitude\"\r\n              type=\"number\"\r\n              step=\"0.000001\"\r\n              min=\"-90\"\r\n              max=\"90\"\r\n              value={formData.latitude}\r\n              onChange={(e) => setFormData(prev => ({ ...prev, latitude: e.target.value }))}\r\n              error={getFieldError('latitude', formErrors)}\r\n            />\r\n            <Input\r\n              label=\"Longitude\"\r\n              type=\"number\"\r\n              step=\"0.000001\"\r\n              min=\"-180\"\r\n              max=\"180\"\r\n              value={formData.longitude}\r\n              onChange={(e) => setFormData(prev => ({ ...prev, longitude: e.target.value }))}\r\n              error={getFieldError('longitude', formErrors)}\r\n            />\r\n          </div>\r\n          <div className=\"form-actions\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={handleCloseCreateModal}>\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" variant=\"primary\" loading={submitLoading}>\r\n              Create Farm\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n\r\n      {/* Create Plot Modal */}\r\n      <Modal\r\n        isOpen={showPlotModal}\r\n        onClose={handleClosePlotModal}\r\n        title=\"Add New Plot\"\r\n      >\r\n        <form onSubmit={handleCreatePlot} className=\"plot-form\">\r\n          {globalError && (\r\n            <Card className=\"alert-error\" style={{ marginBottom: '16px', background: '#ffebee', borderColor: '#f44336' }}>\r\n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <span>{globalError}</span>\r\n                <Button size=\"small\" variant=\"text\" onClick={() => setGlobalError('')}>Ã—</Button>\r\n              </div>\r\n            </Card>\r\n          )}\r\n          \r\n          <Input\r\n            label=\"Plot Number\"\r\n            value={plotFormData.plot_number}\r\n            onChange={(e) => setPlotFormData(prev => ({ ...prev, plot_number: e.target.value }))}\r\n            error={getFieldError('plot_number', plotFormErrors)}\r\n            required\r\n          />\r\n          <Input\r\n            label=\"Area (acres)\"\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            min=\"0.01\"\r\n            value={plotFormData.area}\r\n            onChange={(e) => setPlotFormData(prev => ({ ...prev, area: e.target.value }))}\r\n            error={getFieldError('area', plotFormErrors)}\r\n            required\r\n          />\r\n          <Input\r\n            label=\"Current Crop\"\r\n            value={plotFormData.current_crop}\r\n            onChange={(e) => setPlotFormData(prev => ({ ...prev, current_crop: e.target.value }))}\r\n            error={getFieldError('current_crop', plotFormErrors)}\r\n          />\r\n          <div className=\"form-row\">\r\n            <Input\r\n              label=\"Soil pH\"\r\n              type=\"number\"\r\n              step=\"0.1\"\r\n              min=\"0\"\r\n              max=\"14\"\r\n              value={plotFormData.soil_ph}\r\n              onChange={(e) => setPlotFormData(prev => ({ ...prev, soil_ph: e.target.value }))}\r\n              error={getFieldError('soil_ph', plotFormErrors)}\r\n            />\r\n            <Input\r\n              label=\"Soil Moisture %\"\r\n              type=\"number\"\r\n              step=\"0.1\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={plotFormData.soil_moisture}\r\n              onChange={(e) => setPlotFormData(prev => ({ ...prev, soil_moisture: e.target.value }))}\r\n              error={getFieldError('soil_moisture', plotFormErrors)}\r\n            />\r\n          </div>\r\n          <div className=\"form-actions\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={handleClosePlotModal}>\r\n              Cancel\r\n            </Button>\r\n            <Button type=\"submit\" variant=\"primary\" loading={plotSubmitLoading}>\r\n              Add Plot\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Farms;"],"names":["Farms","farms","setFarms","useState","loading","setLoading","showCreateModal","setShowCreateModal","showPlotModal","setShowPlotModal","selectedFarm","setSelectedFarm","formErrors","setFormErrors","plotFormErrors","setPlotFormErrors","submitLoading","setSubmitLoading","plotSubmitLoading","setPlotSubmitLoading","globalError","setGlobalError","formData","setFormData","plotFormData","setPlotFormData","searchParams","useSearchParams","navigate","useNavigate","soilTypes","useEffect","fetchFarms","action","result","farmAPI","farmsData","error","handleCreateFarm","submitData","apiUtils","handleCreatePlot","handleDeleteFarm","farmId","handleViewFarm","handleAddPlot","prev","handleCloseCreateModal","handleClosePlotModal","getFieldError","fieldName","errors","getFarmPlots","farm","getFarmProperty","property","fallback","jsxs","jsx","LoadingSpinner","farmsArray","Button","Card","farmPlots","plotsCount","plot","Modal","Input","Select","TextArea"],"mappings":"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"}