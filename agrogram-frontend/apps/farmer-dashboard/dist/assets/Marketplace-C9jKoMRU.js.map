{"version":3,"file":"Marketplace-C9jKoMRU.js","sources":["../../src/pages/Marketplace.jsx"],"sourcesContent":["// Marketplace.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { marketplaceAPI, tasksAPI, productsAPI, apiUtils, messagingAPI } from '@agro-gram/api';\r\nimport { Card, Button, LoadingSpinner, Input, Select, Modal, Tabs, TextArea, Alert } from '@agro-gram/ui';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Marketplace.css';\r\n\r\nconst Marketplace = () => {\r\n  const [products, setProducts] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [analytics, setAnalytics] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [filters, setFilters] = useState({\r\n    category: '',\r\n    price_min: '',\r\n    price_max: '',\r\n    quality: '',\r\n    location: ''\r\n  });\r\n  \r\n  // New states for sell product and tasks\r\n  const [showSellProductModal, setShowSellProductModal] = useState(false);\r\n  const [sellProductLoading, setSellProductLoading] = useState(false);\r\n  const [sellProductForm, setSellProductForm] = useState({\r\n    title: '',\r\n    description: '',\r\n    category: '',\r\n    price: '',\r\n    quantity: '',\r\n    unit: 'KG',\r\n    quality_grade: 'STANDARD',\r\n    location: '',\r\n    image: null\r\n  });\r\n  \r\n  const [tasks, setTasks] = useState([]);\r\n  const [tasksLoading, setTasksLoading] = useState(false);\r\n  const [showTaskModal, setShowTaskModal] = useState(false);\r\n  const [taskForm, setTaskForm] = useState({\r\n    title: '',\r\n    description: '',\r\n    task_type: 'OTHER',\r\n    priority: 'MEDIUM',\r\n    due_date: '',\r\n    estimated_hours: 1\r\n  });\r\n\r\n  // Existing states\r\n  const [showPricePrediction, setShowPricePrediction] = useState(false);\r\n  const [pricePrediction, setPricePrediction] = useState(null);\r\n  const [predictionForm, setPredictionForm] = useState({\r\n    cropType: '',\r\n    market: '',\r\n    predictionPeriod: '1 Month',\r\n    useGlobal: false\r\n  });\r\n  const [activeTab, setActiveTab] = useState('browse');\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  const [predictionError, setPredictionError] = useState('');\r\n  const [predictionLoading, setPredictionLoading] = useState(false);\r\n  const [searchLoading, setSearchLoading] = useState(false);\r\n  const [recommendationsLoading, setRecommendationsLoading] = useState(false);\r\n  const [personalizedProducts, setPersonalizedProducts] = useState([]);\r\n\r\n  // New states for product details and contact\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n  const [showProductDetails, setShowProductDetails] = useState(false);\r\n  const [showContactSeller, setShowContactSeller] = useState(false);\r\n  const [contactForm, setContactForm] = useState({\r\n    message: '',\r\n    quantity: 1\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetchMarketplaceData();\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  // Load tasks when tasks tab is active\r\n  useEffect(() => {\r\n    if (activeTab === 'tasks') {\r\n      fetchTasks();\r\n    }\r\n  }, [activeTab]);\r\n\r\n  // Load personalized recommendations when tab is activated\r\n  useEffect(() => {\r\n    if (activeTab === 'personalized' && personalizedProducts.length === 0) {\r\n      handleRefreshRecommendations();\r\n    }\r\n  }, [activeTab]);\r\n\r\n  // Reset form when modal opens/closes\r\n  useEffect(() => {\r\n    if (showSellProductModal) {\r\n      // Try to fetch categories when modal opens\r\n      if (categories.length === 0) {\r\n        fetchCategories();\r\n      }\r\n    }\r\n  }, [showSellProductModal]);\r\n\r\n  const fetchCategories = async () => {\r\n    try {\r\n      console.log('📋 Fetching categories from API...');\r\n      const result = await marketplaceAPI.getCategories();\r\n      \r\n      if (result.success && result.data) {\r\n        const categoriesData = Array.isArray(result.data) ? result.data : result.data.categories || [];\r\n        \r\n        const categoryOptions = categoriesData.map(cat => ({\r\n          value: cat.id ? cat.id.toString() : cat.value,\r\n          label: cat.name || cat.label\r\n        }));\r\n        \r\n        console.log('✅ Categories loaded:', categoryOptions);\r\n        setCategories(categoryOptions);\r\n      } else {\r\n        console.warn('⚠️ Categories API failed, extracting from products');\r\n        extractCategoriesFromProducts();\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error fetching categories:', error);\r\n      extractCategoriesFromProducts();\r\n    }\r\n  };\r\n\r\n  const extractCategoriesFromProducts = () => {\r\n    try {\r\n      const productData = products || [];\r\n      const categoryMap = new Map();\r\n      \r\n      console.log('Extracting categories from products:', productData.length);\r\n      \r\n      productData.forEach(product => {\r\n        // Handle different category formats\r\n        if (product.category && typeof product.category === 'object') {\r\n          // Category is an object with id and name\r\n          if (product.category.id && product.category.name) {\r\n            categoryMap.set(product.category.id.toString(), product.category.name);\r\n          }\r\n        } else if (product.category_name) {\r\n          // Use category_name as fallback\r\n          const categoryId = product.category_name.toLowerCase().replace(/\\s+/g, '_');\r\n          categoryMap.set(categoryId, product.category_name);\r\n        }\r\n      });\r\n      \r\n      // Add some default categories if none found\r\n      if (categoryMap.size === 0) {\r\n        console.log('No categories found in products, adding defaults');\r\n        const defaultCategories = [\r\n          { id: '1', name: 'Grains' },\r\n          { id: '2', name: 'Vegetables' },\r\n          { id: '3', name: 'Fruits' },\r\n          { id: '4', name: 'Livestock' },\r\n          { id: '5', name: 'Dairy' }\r\n        ];\r\n        \r\n        defaultCategories.forEach(cat => {\r\n          categoryMap.set(cat.id, cat.name);\r\n        });\r\n      }\r\n      \r\n      const categoryOptions = Array.from(categoryMap.entries()).map(([id, name]) => ({\r\n        value: id,\r\n        label: name\r\n      }));\r\n      \r\n      console.log('Categories extracted:', categoryOptions);\r\n      setCategories(categoryOptions);\r\n      \r\n    } catch (error) {\r\n      console.error('Error extracting categories:', error);\r\n      // Set default categories as fallback\r\n      const defaultCategories = [\r\n        { value: '1', label: 'Grains' },\r\n        { value: '2', label: 'Vegetables' },\r\n        { value: '3', label: 'Fruits' },\r\n        { value: '4', label: 'Livestock' },\r\n        { value: '5', label: 'Dairy' }\r\n      ];\r\n      setCategories(defaultCategories);\r\n    }\r\n  };\r\n\r\n  const fetchMarketplaceData = async () => {\r\n    setLoading(true);\r\n    setError('');\r\n    try {\r\n      // Only fetch products, skip analytics if it's failing\r\n      const productsResult = await marketplaceAPI.getProducts();\r\n\r\n      if (productsResult.success) {\r\n        const productData = productsResult.data.results || productsResult.data || [];\r\n        setProducts(productData);\r\n        \r\n        // Extract categories from products if API failed\r\n        if (categories.length === 0) {\r\n          extractCategoriesFromProducts();\r\n        }\r\n      } else {\r\n        setError(productsResult.message || 'Failed to load products');\r\n      }\r\n\r\n      // Try to fetch analytics but don't fail if it errors\r\n      try {\r\n        const analyticsResult = await marketplaceAPI.getMarketAnalytics();\r\n        if (analyticsResult.success) {\r\n          setAnalytics(analyticsResult.data.analytics || analyticsResult.data);\r\n        } else {\r\n          console.warn('Analytics API failed, continuing without analytics');\r\n        }\r\n      } catch (analyticsError) {\r\n        console.warn('Analytics unavailable:', analyticsError.message);\r\n        // Continue without analytics - it's not critical\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching marketplace data:', error);\r\n      setError('Failed to load marketplace data. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch tasks function\r\n  const fetchTasks = async () => {\r\n    setTasksLoading(true);\r\n    try {\r\n      const result = await tasksAPI.getAll();\r\n      if (result.success) {\r\n        setTasks(result.data.tasks || result.data || []);\r\n      } else {\r\n        setError(result.message || 'Failed to load tasks');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching tasks:', error);\r\n      setError('Failed to load tasks');\r\n    } finally {\r\n      setTasksLoading(false);\r\n    }\r\n  };\r\n\r\n  // Sell Product function - FIXED\r\n  const handleSellProduct = async (e) => {\r\n    e.preventDefault();\r\n    setSellProductLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      // Validate required fields\r\n      if (!sellProductForm.title?.trim() || \r\n          !sellProductForm.price || \r\n          !sellProductForm.quantity || \r\n          !sellProductForm.category) {\r\n        setError('Please fill in all required fields (Title, Price, Quantity, Category)');\r\n        setSellProductLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Prepare form data with proper types and validation\r\n      const formData = new FormData();\r\n      \r\n      // Required fields\r\n      formData.append('title', sellProductForm.title.trim());\r\n      formData.append('description', sellProductForm.description?.trim() || 'No description provided');\r\n      formData.append('category', sellProductForm.category); // This should be the category ID\r\n      formData.append('price', parseFloat(sellProductForm.price));\r\n      formData.append('quantity', parseInt(sellProductForm.quantity));\r\n      \r\n      // Optional fields with defaults\r\n      formData.append('unit', sellProductForm.unit || 'KG');\r\n      formData.append('quality_grade', sellProductForm.quality_grade || 'STANDARD');\r\n      \r\n      if (sellProductForm.location?.trim()) {\r\n        formData.append('location', sellProductForm.location.trim());\r\n      }\r\n      \r\n      if (sellProductForm.image) {\r\n        formData.append('image', sellProductForm.image);\r\n      }\r\n\r\n      console.log('📦 Creating product with data:');\r\n      console.log('   Title:', sellProductForm.title);\r\n      console.log('   Category:', sellProductForm.category);\r\n      console.log('   Price:', sellProductForm.price);\r\n      console.log('   Quantity:', sellProductForm.quantity);\r\n\r\n      // Debug FormData contents\r\n      console.log('🔍 FormData contents:');\r\n      for (let [key, value] of formData.entries()) {\r\n        console.log(`   ${key}:`, value);\r\n      }\r\n\r\n      const result = await productsAPI.create(formData);\r\n      \r\n      if (result.success) {\r\n        setShowSellProductModal(false);\r\n        setSellProductForm({\r\n          title: '',\r\n          description: '',\r\n          category: '',\r\n          price: '',\r\n          quantity: '',\r\n          unit: 'KG',\r\n          quality_grade: 'STANDARD',\r\n          location: '',\r\n          image: null\r\n        });\r\n        \r\n        // Refresh products list\r\n        fetchMarketplaceData();\r\n        \r\n        // Show success message\r\n        setSuccess('Product listed successfully!');\r\n        setTimeout(() => setSuccess(''), 5000);\r\n      } else {\r\n        // Handle validation errors\r\n        if (result.details) {\r\n          const errorMessages = Object.values(result.details).flat().join(', ');\r\n          setError(errorMessages || result.message || 'Failed to list product');\r\n        } else {\r\n          setError(result.message || 'Failed to list product');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error selling product:', error);\r\n      setError('Failed to list product. Please try again.');\r\n    } finally {\r\n      setSellProductLoading(false);\r\n    }\r\n  };\r\n\r\n  // Create Task function\r\n  const handleCreateTask = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n\r\n    try {\r\n      if (!taskForm.title) {\r\n        setError('Task title is required');\r\n        return;\r\n      }\r\n\r\n      const result = await tasksAPI.create(taskForm);\r\n      \r\n      if (result.success) {\r\n        setShowTaskModal(false);\r\n        setTaskForm({\r\n          title: '',\r\n          description: '',\r\n          task_type: 'OTHER',\r\n          priority: 'MEDIUM',\r\n          due_date: '',\r\n          estimated_hours: 1\r\n        });\r\n        \r\n        // Refresh tasks list\r\n        fetchTasks();\r\n        \r\n        setSuccess('Task created successfully!');\r\n        setTimeout(() => setSuccess(''), 5000);\r\n      } else {\r\n        setError(result.message || 'Failed to create task');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating task:', error);\r\n      setError('Failed to create task');\r\n    }\r\n  };\r\n\r\n  // Complete Task function\r\n  const handleCompleteTask = async (taskId) => {\r\n    try {\r\n      const result = await tasksAPI.complete(taskId);\r\n      if (result.success) {\r\n        // Refresh tasks list\r\n        fetchTasks();\r\n        setSuccess('Task marked as completed!');\r\n        setTimeout(() => setSuccess(''), 5000);\r\n      } else {\r\n        setError(result.message || 'Failed to complete task');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error completing task:', error);\r\n      setError('Failed to complete task');\r\n    }\r\n  };\r\n\r\n  // Delete Task function\r\n  const handleDeleteTask = async (taskId) => {\r\n    if (!window.confirm('Are you sure you want to delete this task?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await tasksAPI.delete(taskId);\r\n      if (result.success) {\r\n        // Refresh tasks list\r\n        fetchTasks();\r\n        setSuccess('Task deleted successfully!');\r\n        setTimeout(() => setSuccess(''), 5000);\r\n      } else {\r\n        setError(result.message || 'Failed to delete task');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting task:', error);\r\n      setError('Failed to delete task');\r\n    }\r\n  };\r\n\r\n  // Handle image upload\r\n  const handleImageUpload = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      const validation = apiUtils.validateFile(file);\r\n      if (validation.valid) {\r\n        setSellProductForm(prev => ({ ...prev, image: file }));\r\n      } else {\r\n        setError(validation.errors[0]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Search function\r\n  const handleSearch = async (e) => {\r\n    e.preventDefault();\r\n    setSearchLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      const result = await marketplaceAPI.searchProducts(searchQuery, filters);\r\n      \r\n      if (result.success) {\r\n        setProducts(result.data.search_results || result.data || []);\r\n      } else {\r\n        setError(result.message || 'Search failed');\r\n        // Fallback to local filtering\r\n        filterProductsLocally();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error searching products:', error);\r\n      setError('Search failed. Using basic filtering.');\r\n      filterProductsLocally();\r\n    } finally {\r\n      setSearchLoading(false);\r\n    }\r\n  };\r\n\r\n  const filterProductsLocally = () => {\r\n    const filtered = products.filter(product => {\r\n      if (filters.category) {\r\n        const productCategory = getProductCategoryName(product);\r\n        if (productCategory !== filters.category) return false;\r\n      }\r\n      if (filters.price_min && product.price < parseFloat(filters.price_min)) return false;\r\n      if (filters.price_max && product.price > parseFloat(filters.price_max)) return false;\r\n      if (filters.quality && product.quality_grade !== filters.quality) return false;\r\n      if (filters.location && !product.location?.toLowerCase().includes(filters.location.toLowerCase())) return false;\r\n      if (searchQuery && !product.title?.toLowerCase().includes(searchQuery.toLowerCase()) && \r\n          !product.description?.toLowerCase().includes(searchQuery.toLowerCase())) return false;\r\n      return true;\r\n    });\r\n    setProducts(filtered);\r\n  };\r\n\r\n  // Helper function to get category name from product\r\n  const getProductCategoryName = (product) => {\r\n    if (typeof product.category === 'object' && product.category.name) {\r\n      return product.category.name;\r\n    }\r\n    return product.category_name || '';\r\n  };\r\n\r\n  const handleRefreshRecommendations = async () => {\r\n    setRecommendationsLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      const result = await marketplaceAPI.getPersonalizedProducts();\r\n      \r\n      if (result.success) {\r\n        setPersonalizedProducts(result.data.personalized_recommendations || []);\r\n      } else {\r\n        setError(result.message || 'Failed to refresh recommendations');\r\n        // Fallback: use regular products\r\n        setPersonalizedProducts(products.slice(0, 10));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error refreshing recommendations:', error);\r\n      setError('Failed to refresh recommendations. Showing general products.');\r\n      setPersonalizedProducts(products.slice(0, 10));\r\n    } finally {\r\n      setRecommendationsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handlePricePrediction = async (e) => {\r\n    e.preventDefault();\r\n    setPredictionLoading(true);\r\n    setPredictionError('');\r\n    setPricePrediction(null);\r\n\r\n    try {\r\n      const result = await marketplaceAPI.getPricePrediction(predictionForm);\r\n      \r\n      if (result.success) {\r\n        setPricePrediction(result.data);\r\n      } else {\r\n        setPredictionError(result.message || 'Failed to get price prediction');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error getting price prediction:', error);\r\n      setPredictionError('Failed to get price prediction. Please try again.');\r\n    } finally {\r\n      setPredictionLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleClearFilters = () => {\r\n    setFilters({\r\n      category: '',\r\n      price_min: '',\r\n      price_max: '',\r\n      quality: '',\r\n      location: ''\r\n    });\r\n    setSearchQuery('');\r\n    setError('');\r\n    fetchMarketplaceData();\r\n  };\r\n\r\n  const handleClosePricePrediction = () => {\r\n    setShowPricePrediction(false);\r\n    setPricePrediction(null);\r\n    setPredictionError('');\r\n    setPredictionForm({\r\n      cropType: '',\r\n      market: '',\r\n      predictionPeriod: '1 Month',\r\n      useGlobal: false\r\n    });\r\n  };\r\n\r\n  // Helper function to check if current user owns the product\r\n  const isCurrentUserProductOwner = (product) => {\r\n    try {\r\n      const auth = window.getAuth ? window.getAuth() : null;\r\n      const currentUser = auth?.currentUser;\r\n      \r\n      // If we can't determine the current user, assume they don't own it\r\n      if (!currentUser || !product.farmer_email) {\r\n        return false;\r\n      }\r\n      \r\n      return currentUser.email === product.farmer_email;\r\n    } catch (error) {\r\n      console.error('Error checking product ownership:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Authentication check function - IMPROVED\r\n  const checkAuthentication = async () => {\r\n    try {\r\n      // Multiple ways to get auth instance\r\n      let auth = null;\r\n      \r\n      if (typeof window.getAuth === 'function') {\r\n        auth = window.getAuth();\r\n      } else if (window.auth) {\r\n        auth = window.auth;\r\n      } else if (window.firebase && window.firebase.auth) {\r\n        auth = window.firebase.auth();\r\n      }\r\n      \r\n      const user = auth?.currentUser;\r\n      \r\n      if (user) {\r\n        console.log('✅ User is authenticated:', user.email);\r\n        \r\n        // Ensure token is fresh\r\n        try {\r\n          const token = await user.getIdToken(true);\r\n          localStorage.setItem('firebaseToken', token);\r\n          console.log('✅ Token refreshed and stored');\r\n        } catch (tokenError) {\r\n          console.warn('⚠️ Could not refresh token, using existing one');\r\n        }\r\n        \r\n        return true;\r\n      } else {\r\n        console.warn('❌ User is not authenticated');\r\n        \r\n        // Check if we have a stored token as fallback\r\n        const storedToken = localStorage.getItem('firebaseToken');\r\n        if (storedToken) {\r\n          console.log('🔄 Using stored token from localStorage');\r\n          return true;\r\n        }\r\n        \r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking authentication:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // NEW: Handle View Details\r\n  const handleViewDetails = (product) => {\r\n    setSelectedProduct(product);\r\n    setShowProductDetails(true);\r\n  };\r\n\r\n  // NEW: Handle Contact Seller with ownership check\r\n  const handleContactSeller = async (product) => {\r\n    // Check authentication first\r\n    const isAuthenticated = await checkAuthentication();\r\n    if (!isAuthenticated) {\r\n      setError('Please log in to contact sellers');\r\n      return;\r\n    }\r\n\r\n    // Check if current user is the product owner\r\n    if (isCurrentUserProductOwner(product)) {\r\n      setError('You cannot message yourself. This is your own product listing.');\r\n      return;\r\n    }\r\n    \r\n    // If authenticated and not the owner, proceed with contact form\r\n    setSelectedProduct(product);\r\n    setContactForm({\r\n      message: `Hi, I'm interested in your \"${product.title}\" listed for $${product.price}. Could you provide more details?`,\r\n      quantity: 1\r\n    });\r\n    setShowContactSeller(true);\r\n  };\r\n\r\n  // NEW: Send message to seller with real API - FIXED\r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!contactForm.message.trim()) {\r\n      setError('Please enter a message');\r\n      return;\r\n    }\r\n\r\n    // Check authentication first\r\n    const isAuthenticated = await checkAuthentication();\r\n    if (!isAuthenticated) {\r\n      setError('Please log in to send messages');\r\n      return;\r\n    }\r\n\r\n    // Check if user is trying to message themselves\r\n    if (isCurrentUserProductOwner(selectedProduct)) {\r\n      setError('You cannot message yourself. This is your own product listing.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Prepare message data for messaging API\r\n      const messageData = {\r\n        product_id: selectedProduct.id,\r\n        message: contactForm.message,\r\n        quantity: contactForm.quantity,\r\n        message_type: 'INQUIRY'\r\n      };\r\n\r\n      console.log('📧 Sending message to seller:', messageData);\r\n\r\n      // Send message via messaging API\r\n      const result = await messagingAPI.sendMessage(messageData);\r\n      \r\n      if (result.success) {\r\n        setShowContactSeller(false);\r\n        setSuccess(`Message sent to ${selectedProduct.farmer_email || 'the seller'}!`);\r\n        setTimeout(() => setSuccess(''), 5000);\r\n        \r\n        // Reset form\r\n        setContactForm({\r\n          message: '',\r\n          quantity: 1\r\n        });\r\n      } else {\r\n        setError(result.message || 'Failed to send message. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      \r\n      // More specific error messages\r\n      if (error.response?.status === 400 && error.response?.data?.error === 'You cannot message yourself') {\r\n        setError('You cannot message yourself. This is your own product listing.');\r\n      } else if (error.response?.status === 403) {\r\n        setError('Authentication failed. Please log in again.');\r\n      } else if (error.response?.status === 401) {\r\n        setError('Session expired. Please log in again.');\r\n      } else {\r\n        setError('Failed to send message. Please try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // NEW: Create order for product - FIXED\r\n  const handleCreateOrder = async () => {\r\n    if (!selectedProduct) return;\r\n\r\n    // Check authentication first\r\n    const isAuthenticated = await checkAuthentication();\r\n    if (!isAuthenticated) {\r\n      setError('Please log in to create orders');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const orderData = {\r\n        product: selectedProduct.id,\r\n        quantity: contactForm.quantity,\r\n        total_price: (selectedProduct.price * contactForm.quantity).toFixed(2),\r\n        shipping_address: 'To be provided', // In real app, get from user profile\r\n        contact_number: 'To be provided'    // In real app, get from user profile\r\n      };\r\n\r\n      console.log('🛒 Creating order:', orderData);\r\n\r\n      const result = await marketplaceAPI.createOrder(orderData);\r\n      \r\n      if (result.success) {\r\n        setShowContactSeller(false);\r\n        setSuccess(`Order created successfully for ${selectedProduct.title}!`);\r\n        setTimeout(() => setSuccess(''), 5000);\r\n      } else {\r\n        setError(result.message || 'Failed to create order');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating order:', error);\r\n      setError('Failed to create order. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Filter products for display\r\n  const filteredProducts = products.filter(product => {\r\n    if (filters.category) {\r\n      const productCategory = getProductCategoryName(product);\r\n      if (productCategory !== filters.category) return false;\r\n    }\r\n    if (filters.price_min && product.price < parseFloat(filters.price_min)) return false;\r\n    if (filters.price_max && product.price > parseFloat(filters.price_max)) return false;\r\n    if (filters.quality && product.quality_grade !== filters.quality) return false;\r\n    if (filters.location && !product.location?.toLowerCase().includes(filters.location.toLowerCase())) return false;\r\n    if (searchQuery && !product.title?.toLowerCase().includes(searchQuery.toLowerCase()) && \r\n        !product.description?.toLowerCase().includes(searchQuery.toLowerCase())) return false;\r\n    return true;\r\n  });\r\n  // Add this state\r\nconst [unreadMessages, setUnreadMessages] = useState(0);\r\n\r\n// Add this useEffect to check for unread messages\r\nuseEffect(() => {\r\n  checkUnreadMessages();\r\n}, []);\r\n\r\nconst checkUnreadMessages = async () => {\r\n  try {\r\n    const result = await messagingAPI.getNotifications();\r\n    if (result.success) {\r\n      setUnreadMessages(result.data.unread_count || 0);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error checking messages:', error);\r\n  }\r\n};\r\nconst [pendingOrders, setPendingOrders] = useState(0);\r\n\r\n// Fetch pending orders (for sellers)\r\nuseEffect(() => {\r\n  const fetchPendingOrders = async () => {\r\n    try {\r\n      const ordersResult = await marketplaceAPI.getOrders();\r\n      if (ordersResult.success) {\r\n        const orders = ordersResult.data.results || ordersResult.data || [];\r\n        const pending = orders.filter(order => \r\n          order.seller_type === 'USER' && order.status === 'PENDING'\r\n        ).length;\r\n        setPendingOrders(pending);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching notifications:', error);\r\n    }\r\n  };\r\n  fetchPendingOrders();\r\n}, []);\r\n  // Render product category name safely\r\n  const renderProductCategory = (product) => {\r\n    return getProductCategoryName(product) || 'Unknown Category';\r\n  };\r\n\r\n  if (loading && products.length === 0) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        <LoadingSpinner size=\"large\" />\r\n        <p>Loading marketplace...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"marketplace\">\r\n      <div className=\"marketplace__header\">\r\n        <h1>Agricultural Marketplace</h1>\r\n        <div className=\"marketplace__actions\">\r\n          <Button variant=\"outline\" onClick={() => setShowPricePrediction(true)}>\r\n            Price Predictions\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={() => setShowSellProductModal(true)}>\r\n            Sell Product\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {error && (\r\n        <Alert type=\"error\" onClose={() => setError('')}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {success && (\r\n        <Alert type=\"success\" onClose={() => setSuccess('')}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n\r\n      <Tabs\r\n        tabs={[\r\n          { id: 'browse', label: 'Browse Products' },\r\n          { id: 'analytics', label: 'Market Analytics' },\r\n          { id: 'personalized', label: 'For You' },\r\n          { id: 'tasks', label: 'My Tasks' }\r\n        ]}\r\n        activeTab={activeTab}\r\n        onChange={setActiveTab}\r\n      />\r\n\r\n      {/* Browse Products Tab */}\r\n      {activeTab === 'browse' && (\r\n        <div className=\"marketplace__content\">\r\n          <Card className=\"search-filters\">\r\n            <form onSubmit={handleSearch} className=\"search-form\">\r\n              <div className=\"search-bar\">\r\n                <Input\r\n                  placeholder=\"Search products...\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                  className=\"search-input\"\r\n                />\r\n                <Button \r\n                  type=\"submit\" \r\n                  variant=\"primary\" \r\n                  loading={searchLoading}\r\n                >\r\n                  Search\r\n                </Button>\r\n              </div>\r\n              \r\n              <div className=\"filters-grid\">\r\n                <Select\r\n                  options={[{ value: '', label: 'All Categories' }, ...categories]}\r\n                  value={filters.category}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, category: e.target.value }))}\r\n                />\r\n                <Input\r\n                  type=\"number\"\r\n                  placeholder=\"Min Price\"\r\n                  value={filters.price_min}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, price_min: e.target.value }))}\r\n                  min=\"0\"\r\n                  step=\"0.01\"\r\n                />\r\n                <Input\r\n                  type=\"number\"\r\n                  placeholder=\"Max Price\"\r\n                  value={filters.price_max}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, price_max: e.target.value }))}\r\n                  min=\"0\"\r\n                  step=\"0.01\"\r\n                />\r\n                <Select\r\n                  options={[\r\n                    { value: '', label: 'All Quality' },\r\n                    { value: 'PREMIUM', label: 'Premium' },\r\n                    { value: 'STANDARD', label: 'Standard' },\r\n                    { value: 'ECONOMY', label: 'Economy' }\r\n                  ]}\r\n                  value={filters.quality}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, quality: e.target.value }))}\r\n                />\r\n                <Input\r\n                  placeholder=\"Location\"\r\n                  value={filters.location}\r\n                  onChange={(e) => setFilters(prev => ({ ...prev, location: e.target.value }))}\r\n                />\r\n                <Button type=\"button\" variant=\"outline\" onClick={handleClearFilters}>\r\n                  Clear Filters\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </Card>\r\n\r\n          {searchLoading ? (\r\n            <div className=\"loading-container\">\r\n              <LoadingSpinner size=\"medium\" />\r\n              <p>Searching products...</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"products-grid\">\r\n              {filteredProducts.map(product => (\r\n                <Card key={product.id} className=\"product-card\">\r\n                  <div className=\"product-card__image\">\r\n                    {product.image ? (\r\n                      <img src={product.image} alt={product.title} />\r\n                    ) : (\r\n                      <div className=\"product-image-placeholder\">🌱</div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"product-card__content\">\r\n                    <div className=\"product-header\">\r\n                      <h3>{product.title || 'Untitled Product'}</h3>\r\n                      {product.quality_grade && (\r\n                        <span className={`quality-badge quality-${product.quality_grade?.toLowerCase()}`}>\r\n                          {product.quality_grade}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    <div className=\"product-category\">\r\n                      <small>Category: {renderProductCategory(product)}</small>\r\n                    </div>\r\n                    \r\n                    <p className=\"product-description\">\r\n                      {product.description || 'No description available'}\r\n                    </p>\r\n                    \r\n                    <div className=\"product-meta\">\r\n                      <span className=\"product-price\">${product.price || 'N/A'}</span>\r\n                      <span className=\"product-quantity\">\r\n                        {product.quantity || '0'} {product.unit || 'units'}\r\n                      </span>\r\n                      <span className=\"product-location\">\r\n                        {product.location || 'Location not specified'}\r\n                      </span>\r\n                    </div>\r\n\r\n                    <div className=\"product-seller\">\r\n                      <small>By: {product.farmer_email || 'Unknown seller'}</small>\r\n                    </div>\r\n\r\n                    {product.market_insights && (\r\n                      <div className=\"market-insights\">\r\n                        {product.demand_level?.level && (\r\n                          <div className={`demand-badge demand-${product.demand_level?.level?.toLowerCase()}`}>\r\n                            {product.demand_level?.level} Demand\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n\r\n                    <div className=\"product-actions\">\r\n                      <Button \r\n                        variant=\"outline\" \r\n                        size=\"small\"\r\n                        onClick={() => handleViewDetails(product)}\r\n                      >\r\n                        View Details\r\n                      </Button>\r\n                      {/* Only show Contact Seller button if user is not the product owner */}\r\n                      {!isCurrentUserProductOwner(product) && (\r\n                        <Button \r\n                          variant=\"primary\" \r\n                          size=\"small\"\r\n                          onClick={() => handleContactSeller(product)}\r\n                        >\r\n                          Contact Seller\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          {filteredProducts.length === 0 && !searchLoading && (\r\n            <Card className=\"no-products\">\r\n              <div className=\"no-products-content\">\r\n                <h3>No products found</h3>\r\n                <p>Try adjusting your search criteria or clear filters.</p>\r\n                <Button variant=\"outline\" onClick={handleClearFilters}>\r\n                  Clear Filters\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Analytics Tab */}\r\n      {activeTab === 'analytics' && (\r\n        <div className=\"marketplace__content\">\r\n          {!analytics ? (\r\n            <Card>\r\n              <div className=\"no-analytics\">\r\n                <h3>Analytics Unavailable</h3>\r\n                <p>Market analytics are currently not available. Please try again later.</p>\r\n                <Button variant=\"outline\" onClick={fetchMarketplaceData}>\r\n                  Retry\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n          ) : (\r\n            <div className=\"analytics-grid\">\r\n              <Card title=\"Market Overview\">\r\n                <div className=\"stats-row\">\r\n                  <div className=\"stat\">\r\n                    <h3>{analytics.total_products || 0}</h3>\r\n                    <p>Total Products</p>\r\n                  </div>\r\n                  <div className=\"stat\">\r\n                    <h3>{analytics.active_products || 0}</h3>\r\n                    <p>Active Listings</p>\r\n                  </div>\r\n                  <div className=\"stat\">\r\n                    <h3>{analytics.total_orders || 0}</h3>\r\n                    <p>Total Orders</p>\r\n                  </div>\r\n                  <div className=\"stat\">\r\n                    <h3>{((analytics.avg_demand_score || 0) * 100).toFixed(1)}%</h3>\r\n                    <p>Avg Demand</p>\r\n                  </div>\r\n                </div>\r\n              </Card>\r\n\r\n              <Card title=\"Price Trends\">\r\n                <div className=\"trends-list\">\r\n                  {analytics.price_movements?.length > 0 ? (\r\n                    analytics.price_movements.map((movement, index) => (\r\n                      <div key={index} className=\"trend-item\">\r\n                        <span className=\"trend-product\">{movement.title}</span>\r\n                        <span className={`trend-value ${movement.price_trend > 0 ? 'trend-up' : 'trend-down'}`}>\r\n                          {movement.price_trend > 0 ? '↗' : '↘'} {Math.abs(movement.price_trend)}%\r\n                        </span>\r\n                      </div>\r\n                    ))\r\n                  ) : (\r\n                    <p className=\"no-data\">No price trend data available</p>\r\n                  )}\r\n                </div>\r\n              </Card>\r\n\r\n              <Card title=\"Popular Categories\">\r\n                <div className=\"categories-list\">\r\n                  {analytics.popular_categories?.length > 0 ? (\r\n                    analytics.popular_categories.map((category, index) => (\r\n                      <div key={index} className=\"category-item\">\r\n                        <span className=\"category-name\">{category.category__name}</span>\r\n                        <span className=\"category-count\">{category.product_count} products</span>\r\n                        <span className=\"category-demand\">\r\n                          {((category.avg_demand || 0) * 100).toFixed(1)}% demand\r\n                        </span>\r\n                      </div>\r\n                    ))\r\n                  ) : (\r\n                    <p className=\"no-data\">No category data available</p>\r\n                  )}\r\n                </div>\r\n              </Card>\r\n\r\n              <Card title=\"Regional Insights\">\r\n                <div className=\"regions-list\">\r\n                  {analytics.regional_insights?.length > 0 ? (\r\n                    analytics.regional_insights.map((region, index) => (\r\n                      <div key={index} className=\"region-item\">\r\n                        <span className=\"region-name\">{region.location}</span>\r\n                        <span className=\"region-stats\">\r\n                          {region.product_count} products • ${region.avg_price}\r\n                        </span>\r\n                      </div>\r\n                    ))\r\n                  ) : (\r\n                    <p className=\"no-data\">No regional data available</p>\r\n                  )}\r\n                </div>\r\n              </Card>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Personalized Tab */}\r\n      {activeTab === 'personalized' && (\r\n        <div className=\"marketplace__content\">\r\n          <Card>\r\n            <div className=\"personalized-content\">\r\n              <h3>Personalized Recommendations</h3>\r\n              <p>Based on your preferences and browsing history</p>\r\n              <Button \r\n                variant=\"primary\" \r\n                onClick={handleRefreshRecommendations}\r\n                loading={recommendationsLoading}\r\n              >\r\n                Refresh Recommendations\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n\r\n          {recommendationsLoading ? (\r\n            <div className=\"loading-container\">\r\n              <LoadingSpinner size=\"medium\" />\r\n              <p>Loading personalized recommendations...</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"products-grid\">\r\n              {personalizedProducts.map(product => (\r\n                <Card key={product.id} className=\"product-card\">\r\n                  <div className=\"product-card__image\">\r\n                    {product.image ? (\r\n                      <img src={product.image} alt={product.title} />\r\n                    ) : (\r\n                      <div className=\"product-image-placeholder\">🌱</div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"product-card__content\">\r\n                    <div className=\"product-header\">\r\n                      <h3>{product.title || 'Untitled Product'}</h3>\r\n                      {product.quality_grade && (\r\n                        <span className={`quality-badge quality-${product.quality_grade?.toLowerCase()}`}>\r\n                          {product.quality_grade}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    <div className=\"product-category\">\r\n                      <small>Category: {renderProductCategory(product)}</small>\r\n                    </div>\r\n                    \r\n                    <p className=\"product-description\">\r\n                      {product.description || 'No description available'}\r\n                    </p>\r\n                    \r\n                    <div className=\"product-meta\">\r\n                      <span className=\"product-price\">${product.price || 'N/A'}</span>\r\n                      <span className=\"product-quantity\">\r\n                        {product.quantity || '0'} {product.unit || 'units'}\r\n                      </span>\r\n                      <span className=\"product-location\">\r\n                        {product.location || 'Location not specified'}\r\n                      </span>\r\n                    </div>\r\n\r\n                    <div className=\"product-seller\">\r\n                      <small>By: {product.farmer_email || 'Unknown seller'}</small>\r\n                    </div>\r\n\r\n                    <div className=\"recommendation-badge\">\r\n                      <span className=\"badge\">Recommended for you</span>\r\n                    </div>\r\n\r\n                    <div className=\"product-actions\">\r\n                      <Button \r\n                        variant=\"outline\" \r\n                        size=\"small\"\r\n                        onClick={() => handleViewDetails(product)}\r\n                      >\r\n                        View Details\r\n                      </Button>\r\n                      {/* Only show Contact Seller button if user is not the product owner */}\r\n                      {!isCurrentUserProductOwner(product) && (\r\n                        <Button \r\n                          variant=\"primary\" \r\n                          size=\"small\"\r\n                          onClick={() => handleContactSeller(product)}\r\n                        >\r\n                          Contact Seller\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          {personalizedProducts.length === 0 && !recommendationsLoading && (\r\n            <Card className=\"no-products\">\r\n              <div className=\"no-products-content\">\r\n                <h3>No personalized recommendations yet</h3>\r\n                <p>Refresh recommendations or browse more products to get personalized suggestions.</p>\r\n                <Button variant=\"outline\" onClick={handleRefreshRecommendations}>\r\n                  Refresh Recommendations\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Tasks Tab */}\r\n      {activeTab === 'tasks' && (\r\n        <div className=\"marketplace__content\">\r\n          <Card>\r\n            <div className=\"tasks-header\">\r\n              <h3>My Tasks</h3>\r\n              <Button variant=\"primary\" onClick={() => setShowTaskModal(true)}>\r\n                Add New Task\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n\r\n          {tasksLoading ? (\r\n            <div className=\"loading-container\">\r\n              <LoadingSpinner size=\"medium\" />\r\n              <p>Loading tasks...</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"tasks-list\">\r\n              {tasks.map(task => (\r\n                <Card key={task.id} className=\"task-card\">\r\n                  <div className=\"task-content\">\r\n                    <div className=\"task-header\">\r\n                      <h4>{task.title}</h4>\r\n                      <span className={`priority-badge priority-${task.priority?.toLowerCase()}`}>\r\n                        {task.priority}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    {task.description && (\r\n                      <p className=\"task-description\">{task.description}</p>\r\n                    )}\r\n                    \r\n                    <div className=\"task-meta\">\r\n                      <span className={`status-badge status-${task.status?.toLowerCase()}`}>\r\n                        {task.status}\r\n                      </span>\r\n                      {task.due_date && (\r\n                        <span className=\"due-date\">\r\n                          Due: {new Date(task.due_date).toLocaleDateString()}\r\n                        </span>\r\n                      )}\r\n                      {task.completed_at && (\r\n                        <span className=\"completed-date\">\r\n                          Completed: {new Date(task.completed_at).toLocaleDateString()}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n\r\n                    <div className=\"task-actions\">\r\n                      {task.status !== 'COMPLETED' && (\r\n                        <Button \r\n                          variant=\"outline\" \r\n                          size=\"small\"\r\n                          onClick={() => handleCompleteTask(task.id)}\r\n                        >\r\n                          Mark Complete\r\n                        </Button>\r\n                      )}\r\n                      <Button \r\n                        variant=\"text\" \r\n                        size=\"small\"\r\n                        onClick={() => handleDeleteTask(task.id)}\r\n                      >\r\n                        Delete\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          {tasks.length === 0 && !tasksLoading && (\r\n            <Card className=\"no-tasks\">\r\n              <div className=\"no-tasks-content\">\r\n                <h3>No tasks yet</h3>\r\n                <p>Create your first task to get started with managing your agricultural activities.</p>\r\n                <Button variant=\"primary\" onClick={() => setShowTaskModal(true)}>\r\n                  Create Your First Task\r\n                </Button>\r\n              </div>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Sell Product Modal */}\r\n      <Modal\r\n        isOpen={showSellProductModal}\r\n        onClose={() => setShowSellProductModal(false)}\r\n        title=\"Sell Your Product\"\r\n        size=\"large\"\r\n      >\r\n        <form onSubmit={handleSellProduct} className=\"sell-product-form\">\r\n          <div className=\"form-row\">\r\n            <Input\r\n              label=\"Product Title *\"\r\n              value={sellProductForm.title}\r\n              onChange={(e) => setSellProductForm(prev => ({ ...prev, title: e.target.value }))}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Category *\"\r\n              options={[\r\n                { value: '', label: 'Select Category' },\r\n                ...categories\r\n              ]}\r\n              value={sellProductForm.category}\r\n              onChange={(e) => setSellProductForm(prev => ({ ...prev, category: e.target.value }))}\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <TextArea\r\n            label=\"Description *\"\r\n            value={sellProductForm.description}\r\n            onChange={(e) => setSellProductForm(prev => ({ ...prev, description: e.target.value }))}\r\n            rows={3}\r\n            required\r\n          />\r\n\r\n          <div className=\"form-row\">\r\n            <Input\r\n              label=\"Price *\"\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              min=\"0.01\"\r\n              value={sellProductForm.price}\r\n              onChange={(e) => setSellProductForm(prev => ({ ...prev, price: e.target.value }))}\r\n              required\r\n            />\r\n            <Input\r\n              label=\"Quantity *\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              value={sellProductForm.quantity}\r\n              onChange={(e) => setSellProductForm(prev => ({ ...prev, quantity: e.target.value }))}\r\n              required\r\n            />\r\n            <Select\r\n              label=\"Unit\"\r\n              options={[\r\n                { value: 'KG', label: 'Kilogram' },\r\n                { value: 'LB', label: 'Pound' },\r\n                { value: 'TON', label: 'Ton' },\r\n                { value: 'SACK', label: 'Sack' },\r\n                { value: 'PIECE', label: 'Piece' }\r\n              ]}\r\n              value={sellProductForm.unit}\r\n              onChange={(e) => setSellProductForm(prev => ({ ...prev, unit: e.target.value }))}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-row\">\r\n            <Select\r\n              label=\"Quality Grade\"\r\n              options={[\r\n                { value: 'PREMIUM', label: 'Premium' },\r\n                { value: 'STANDARD', label: 'Standard' },\r\n                { value: 'ECONOMY', label: 'Economy' }\r\n              ]}\r\n              value={sellProductForm.quality_grade}\r\n              onChange={(e) => setSellProductForm(prev => ({ ...prev, quality_grade: e.target.value }))}\r\n            />\r\n            <Input\r\n              label=\"Location\"\r\n              value={sellProductForm.location}\r\n              onChange={(e) => setSellProductForm(prev => ({ ...prev, location: e.target.value }))}\r\n              placeholder=\"e.g., Nairobi, Kenya\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-row\">\r\n            <Input\r\n              label=\"Product Image\"\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              onChange={handleImageUpload}\r\n            />\r\n            {sellProductForm.image && (\r\n              <div className=\"image-preview\">\r\n                <img \r\n                  src={URL.createObjectURL(sellProductForm.image)} \r\n                  alt=\"Preview\" \r\n                  style={{ maxWidth: '100px', maxHeight: '100px' }}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"form-actions\">\r\n            <Button \r\n              type=\"submit\" \r\n              variant=\"primary\" \r\n              loading={sellProductLoading}\r\n              disabled={!sellProductForm.title?.trim() || !sellProductForm.price || !sellProductForm.quantity || !sellProductForm.category}\r\n            >\r\n              List Product\r\n            </Button>\r\n            <Button \r\n              type=\"button\" \r\n              variant=\"outline\" \r\n              onClick={() => setShowSellProductModal(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n\r\n      {/* Create Task Modal */}\r\n      <Modal\r\n        isOpen={showTaskModal}\r\n        onClose={() => setShowTaskModal(false)}\r\n        title=\"Create New Task\"\r\n        size=\"medium\"\r\n      >\r\n        <form onSubmit={handleCreateTask} className=\"create-task-form\">\r\n          <Input\r\n            label=\"Task Title *\"\r\n            value={taskForm.title}\r\n            onChange={(e) => setTaskForm(prev => ({ ...prev, title: e.target.value }))}\r\n            required\r\n          />\r\n\r\n          <TextArea\r\n            label=\"Description\"\r\n            value={taskForm.description}\r\n            onChange={(e) => setTaskForm(prev => ({ ...prev, description: e.target.value }))}\r\n            rows={3}\r\n            placeholder=\"Describe the task details...\"\r\n          />\r\n\r\n          <div className=\"form-row\">\r\n            <Select\r\n              label=\"Task Type\"\r\n              options={[\r\n                { value: 'PLANTING', label: 'Planting' },\r\n                { value: 'HARVESTING', label: 'Harvesting' },\r\n                { value: 'IRRIGATION', label: 'Irrigation' },\r\n                { value: 'FERTILIZATION', label: 'Fertilization' },\r\n                { value: 'PEST_CONTROL', label: 'Pest Control' },\r\n                { value: 'OTHER', label: 'Other' }\r\n              ]}\r\n              value={taskForm.task_type}\r\n              onChange={(e) => setTaskForm(prev => ({ ...prev, task_type: e.target.value }))}\r\n            />\r\n            <Select\r\n              label=\"Priority\"\r\n              options={[\r\n                { value: 'LOW', label: 'Low' },\r\n                { value: 'MEDIUM', label: 'Medium' },\r\n                { value: 'HIGH', label: 'High' },\r\n                { value: 'URGENT', label: 'Urgent' }\r\n              ]}\r\n              value={taskForm.priority}\r\n              onChange={(e) => setTaskForm(prev => ({ ...prev, priority: e.target.value }))}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-row\">\r\n            <Input\r\n              label=\"Due Date\"\r\n              type=\"datetime-local\"\r\n              value={taskForm.due_date}\r\n              onChange={(e) => setTaskForm(prev => ({ ...prev, due_date: e.target.value }))}\r\n            />\r\n            <Input\r\n              label=\"Estimated Hours\"\r\n              type=\"number\"\r\n              min=\"1\"\r\n              max=\"1000\"\r\n              value={taskForm.estimated_hours}\r\n              onChange={(e) => setTaskForm(prev => ({ ...prev, estimated_hours: parseInt(e.target.value) || 1 }))}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-actions\">\r\n            <Button \r\n              type=\"submit\" \r\n              variant=\"primary\"\r\n              disabled={!taskForm.title}\r\n            >\r\n              Create Task\r\n            </Button>\r\n            <Button \r\n              type=\"button\" \r\n              variant=\"outline\" \r\n              onClick={() => setShowTaskModal(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n\r\n      {/* Price Prediction Modal */}\r\n      <Modal\r\n        isOpen={showPricePrediction}\r\n        onClose={handleClosePricePrediction}\r\n        title=\"AI Price Prediction\"\r\n        size=\"large\"\r\n      >\r\n        <div className=\"price-prediction-modal\">\r\n          {predictionError && (\r\n            <Alert type=\"warning\" onClose={() => setPredictionError('')}>\r\n              {predictionError}\r\n            </Alert>\r\n          )}\r\n\r\n          <form onSubmit={handlePricePrediction} className=\"prediction-form\">\r\n            <div className=\"form-row\">\r\n              <Select\r\n                label=\"Crop Type *\"\r\n                options={[\r\n                  { value: '', label: 'Select Crop Type' },\r\n                  { value: 'Maize', label: 'Maize' },\r\n                  { value: 'Rice', label: 'Rice' },\r\n                  { value: 'Beans', label: 'Beans' },\r\n                  { value: 'Cassava', label: 'Cassava' },\r\n                  { value: 'Wheat', label: 'Wheat' },\r\n                  { value: 'Tomatoes', label: 'Tomatoes' },\r\n                  { value: 'Potatoes', label: 'Potatoes' }\r\n                ]}\r\n                value={predictionForm.cropType}\r\n                onChange={(e) => setPredictionForm(prev => ({ ...prev, cropType: e.target.value }))}\r\n                required\r\n              />\r\n              <Input\r\n                label=\"Region/Market *\"\r\n                value={predictionForm.market}\r\n                onChange={(e) => setPredictionForm(prev => ({ ...prev, market: e.target.value }))}\r\n                required\r\n              />\r\n            </div>\r\n            \r\n            <Select\r\n              label=\"Prediction Period\"\r\n              options={[\r\n                { value: '1 Week', label: '1 Week' },\r\n                { value: '1 Month', label: '1 Month' },\r\n                { value: '3 Months', label: '3 Months' },\r\n                { value: '6 Months', label: '6 Months' },\r\n                { value: '1 Year', label: '1 Year' }\r\n              ]}\r\n              value={predictionForm.predictionPeriod}\r\n              onChange={(e) => setPredictionForm(prev => ({ ...prev, predictionPeriod: e.target.value }))}\r\n            />\r\n\r\n            <div className=\"form-actions\">\r\n              <Button \r\n                type=\"submit\" \r\n                variant=\"primary\" \r\n                loading={predictionLoading}\r\n                disabled={!predictionForm.cropType || !predictionForm.market}\r\n              >\r\n                Get Prediction\r\n              </Button>\r\n            </div>\r\n          </form>\r\n\r\n          {pricePrediction && (\r\n            <div className=\"prediction-results\">\r\n              <h4>Price Prediction Results</h4>\r\n              <div className=\"prediction-card\">\r\n                <div className=\"prediction-header\">\r\n                  <h3>{pricePrediction.crop}</h3>\r\n                  <span className=\"prediction-region\">{pricePrediction.region}</span>\r\n                </div>\r\n                \r\n                <div className=\"prediction-metrics\">\r\n                  <div className=\"metric\">\r\n                    <label>Current Price</label>\r\n                    <span className=\"price\">${pricePrediction.current_price}</span>\r\n                  </div>\r\n                  <div className=\"metric\">\r\n                    <label>Predicted Price</label>\r\n                    <span className=\"price predicted\">${pricePrediction.predicted_price}</span>\r\n                  </div>\r\n                  <div className=\"metric\">\r\n                    <label>Confidence</label>\r\n                    <span className=\"confidence\">{((pricePrediction.confidence || 0) * 100).toFixed(1)}%</span>\r\n                  </div>\r\n                  <div className=\"metric\">\r\n                    <label>Trend</label>\r\n                    <span className={`trend trend-${pricePrediction.trend}`}>\r\n                      {pricePrediction.trend}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n\r\n                {pricePrediction.price_range && (\r\n                  <div className=\"price-range\">\r\n                    <h5>Price Range</h5>\r\n                    <div className=\"range-bars\">\r\n                      <div className=\"range-min\">${pricePrediction.price_range.min}</div>\r\n                      <div className=\"range-avg\">${pricePrediction.price_range.avg}</div>\r\n                      <div className=\"range-max\">${pricePrediction.price_range.max}</div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {pricePrediction.predictions && pricePrediction.predictions.length > 0 && (\r\n                  <div className=\"future-predictions\">\r\n                    <h5>Future Predictions</h5>\r\n                    <div className=\"predictions-list\">\r\n                      {pricePrediction.predictions.slice(0, 5).map((pred, index) => (\r\n                        <div key={index} className=\"future-prediction\">\r\n                          <span>{pred.date}</span>\r\n                          <span>${pred.predicted_price}</span>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Modal>\r\n\r\n      {/* NEW: Product Details Modal */}\r\n      <Modal\r\n        isOpen={showProductDetails}\r\n        onClose={() => setShowProductDetails(false)}\r\n        title=\"Product Details\"\r\n        size=\"large\"\r\n      >\r\n        {selectedProduct && (\r\n          <div className=\"product-details\">\r\n            <div className=\"product-details__header\">\r\n              <div className=\"product-image\">\r\n                {selectedProduct.image ? (\r\n                  <img src={selectedProduct.image} alt={selectedProduct.title} />\r\n                ) : (\r\n                  <div className=\"product-image-placeholder large\">🌱</div>\r\n                )}\r\n              </div>\r\n              <div className=\"product-info\">\r\n                <h2>{selectedProduct.title}</h2>\r\n                <div className=\"product-meta\">\r\n                  <span className=\"product-price\">${selectedProduct.price}</span>\r\n                  <span className=\"product-quantity\">\r\n                    {selectedProduct.quantity} {selectedProduct.unit}\r\n                  </span>\r\n                  <span className={`quality-badge quality-${selectedProduct.quality_grade?.toLowerCase()}`}>\r\n                    {selectedProduct.quality_grade}\r\n                  </span>\r\n                </div>\r\n                <div className=\"product-seller\">\r\n                  <strong>Seller:</strong> {selectedProduct.farmer_email || 'Unknown seller'}\r\n                </div>\r\n                <div className=\"product-location\">\r\n                  <strong>Location:</strong> {selectedProduct.location || 'Not specified'}\r\n                </div>\r\n                <div className=\"product-category\">\r\n                  <strong>Category:</strong> {renderProductCategory(selectedProduct)}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"product-details__content\">\r\n              <h4>Description</h4>\r\n              <p>{selectedProduct.description || 'No description available.'}</p>\r\n\r\n              {selectedProduct.market_insights && (\r\n                <div className=\"market-insights\">\r\n                  <h4>Market Insights</h4>\r\n                  {selectedProduct.demand_level?.level && (\r\n                    <div className=\"insight-item\">\r\n                      <strong>Demand:</strong> \r\n                      <span className={`demand-badge demand-${selectedProduct.demand_level?.level?.toLowerCase()}`}>\r\n                        {selectedProduct.demand_level?.level}\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"product-actions\">\r\n                {/* Only show Contact Seller button if user is not the product owner */}\r\n                {!isCurrentUserProductOwner(selectedProduct) && (\r\n                  <Button \r\n                    variant=\"primary\" \r\n                    onClick={() => {\r\n                      setShowProductDetails(false);\r\n                      handleContactSeller(selectedProduct);\r\n                    }}\r\n                  >\r\n                    Contact Seller\r\n                  </Button>\r\n                )}\r\n                <Button \r\n                  variant=\"outline\" \r\n                  onClick={() => setShowProductDetails(false)}\r\n                >\r\n                  Close\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Modal>\r\n\r\n      {/* NEW: Contact Seller Modal */}\r\n      <Modal\r\n        isOpen={showContactSeller}\r\n        onClose={() => setShowContactSeller(false)}\r\n        title={`Contact Seller - ${selectedProduct?.title}`}\r\n        size=\"medium\"\r\n      >\r\n        {selectedProduct && (\r\n          <div className=\"contact-seller\">\r\n            <div className=\"seller-info\">\r\n              <p><strong>Product:</strong> {selectedProduct.title}</p>\r\n              <p><strong>Price:</strong> ${selectedProduct.price} per {selectedProduct.unit}</p>\r\n              <p><strong>Seller:</strong> {selectedProduct.farmer_email || 'Unknown seller'}</p>\r\n            </div>\r\n\r\n            <form onSubmit={handleSendMessage} className=\"contact-form\">\r\n              <div className=\"form-row\">\r\n                <Input\r\n                  label=\"Quantity\"\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  max={selectedProduct.quantity}\r\n                  value={contactForm.quantity}\r\n                  onChange={(e) => setContactForm(prev => ({ ...prev, quantity: parseInt(e.target.value) || 1 }))}\r\n                />\r\n                <div className=\"total-price\">\r\n                  <strong>Total: </strong>\r\n                  ${(selectedProduct.price * contactForm.quantity).toFixed(2)}\r\n                </div>\r\n              </div>\r\n\r\n              <TextArea\r\n                label=\"Message to Seller\"\r\n                value={contactForm.message}\r\n                onChange={(e) => setContactForm(prev => ({ ...prev, message: e.target.value }))}\r\n                rows={4}\r\n                placeholder=\"Type your message to the seller...\"\r\n                required\r\n              />\r\n\r\n              <div className=\"contact-actions\">\r\n                <Button type=\"submit\" variant=\"primary\">\r\n                  Send Message\r\n                </Button>\r\n                <Button \r\n                  type=\"button\" \r\n                  variant=\"outline\"\r\n                  onClick={handleCreateOrder}\r\n                >\r\n                  Create Order\r\n                </Button>\r\n                <Button \r\n                  type=\"button\" \r\n                  variant=\"text\"\r\n                  onClick={() => setShowContactSeller(false)}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        )}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Marketplace;"],"names":["Marketplace","products","setProducts","useState","categories","setCategories","analytics","setAnalytics","loading","setLoading","searchQuery","setSearchQuery","filters","setFilters","showSellProductModal","setShowSellProductModal","sellProductLoading","setSellProductLoading","sellProductForm","setSellProductForm","tasks","setTasks","tasksLoading","setTasksLoading","showTaskModal","setShowTaskModal","taskForm","setTaskForm","showPricePrediction","setShowPricePrediction","pricePrediction","setPricePrediction","predictionForm","setPredictionForm","activeTab","setActiveTab","error","setError","success","setSuccess","predictionError","setPredictionError","predictionLoading","setPredictionLoading","searchLoading","setSearchLoading","recommendationsLoading","setRecommendationsLoading","personalizedProducts","setPersonalizedProducts","selectedProduct","setSelectedProduct","showProductDetails","setShowProductDetails","showContactSeller","setShowContactSeller","contactForm","setContactForm","useNavigate","useEffect","fetchMarketplaceData","fetchCategories","fetchTasks","handleRefreshRecommendations","result","marketplaceAPI","categoryOptions","cat","extractCategoriesFromProducts","productData","categoryMap","product","categoryId","id","name","productsResult","analyticsResult","analyticsError","tasksAPI","handleSellProduct","e","_a","formData","_b","_c","key","value","productsAPI","errorMessages","handleCreateTask","handleCompleteTask","taskId","handleDeleteTask","handleImageUpload","file","validation","apiUtils","prev","handleSearch","filterProductsLocally","filtered","getProductCategoryName","handlePricePrediction","handleClearFilters","handleClosePricePrediction","isCurrentUserProductOwner","auth","currentUser","checkAuthentication","user","token","handleViewDetails","handleContactSeller","handleSendMessage","messageData","messagingAPI","handleCreateOrder","orderData","filteredProducts","unreadMessages","setUnreadMessages","checkUnreadMessages","pendingOrders","setPendingOrders","ordersResult","pending","order","renderProductCategory","jsxs","jsx","LoadingSpinner","Button","Alert","Tabs","Card","Input","Select","_d","_e","movement","index","category","region","task","Modal","TextArea","pred","_f","_h","_g","_i"],"mappings":"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"}