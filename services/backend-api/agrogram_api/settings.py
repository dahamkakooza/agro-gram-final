#agrogram-api/settings.py
"""
Django settings for agrogram_api project.

Generated by 'django-admin startproject' using Django 5.2.6.
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import firebase_admin
from firebase_admin import credentials
import logging
import sys

# Configure logging to handle Unicode
if sys.platform == "win32":
    # Windows-specific logging configuration
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(stream=sys.stdout)
        ]
    )

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-fallback-key-for-dev-only')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third-party apps
    'rest_framework',
    'corsheaders',
    'django_extensions', # Useful for development
    
    # Local apps - ADD USERS BACK
    'users',  # ⬅️ ADD THIS LINE
    'farms',
    'marketplace',
    'recommendations',
    'messaging',  # ⬅️ ADD THIS LINE
    'shared',
    'dashboard_farmer',
    'dashboard_consumer', 
    'dashboard_supplier',
    'dashboard_agent',
    'dashboard_admin',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # First
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'agrogram_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'agrogram_api.wsgi.application'

# Database - TEMPORARILY SWITCH TO SQLITE
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# TEMPORARILY COMMENT OUT POSTGRESQL SETTINGS:
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv('DB_NAME', 'agrogram_db'),
#         'USER': os.getenv('DB_USER', 'agrogram_user'),
#         'PASSWORD': os.getenv('DB_PASSWORD', ''),
#         'HOST': os.getenv('DB_HOST', 'localhost'),
#         'PORT': os.getenv('DB_PORT', '5432'),
#         'CONN_MAX_AGE': 60,
#     }
# }

# Cache configuration (for AI model caching)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
# Gemini AI Configuration
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', '')

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings - TEMPORARILY DISABLE AUTH FOR TESTING
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'users.authentication.FirebaseAuthentication',  # ⬅️ COMMENT OUT TEMPORARILY
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',  # ⬅️ COMMENT OUT TEMPORARILY
        'rest_framework.permissions.AllowAny',  # ⬅️ ADD THIS FOR TESTING
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    # 'EXCEPTION_HANDLER': 'agrogram_api.exceptions.custom_exception_handler',  # ⬅️ COMMENT OUT IF IT DOESN'T EXIST
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:5173",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5173",
    "https://agrogram-dev.web.app",
    "https://agrogram-prod.web.app",
]

CORS_ALLOW_ALL_ORIGINS = True  # Only in development
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-request-id', #added
]

# Firebase Admin SDK Setup
FIREBASE_CREDENTIAL_PATH = os.getenv('FIREBASE_CREDENTIAL_PATH')

if FIREBASE_CREDENTIAL_PATH and os.path.exists(FIREBASE_CREDENTIAL_PATH):
    cred = credentials.Certificate(FIREBASE_CREDENTIAL_PATH)
    firebase_admin.initialize_app(cred)
    print("✅ Firebase Admin SDK initialized successfully")
else:
    print(f"⚠️ Warning: Firebase credential file not found at {FIREBASE_CREDENTIAL_PATH}")

# Custom user model - UNCOMMENT THIS LINE
AUTH_USER_MODEL = 'users.UserProfile'  # ⬅️ UNCOMMENT THIS LINE

# AI Configuration
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', 'AIzaSyBNwRHvk-GXvP0sLQwLzVsuK09eoIeahUU')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY', '')
MARKET_DATA_API_KEY = os.getenv('MARKET_DATA_API_KEY', '')

# AI Model Configuration
AI_CONFIG = {
    'GEMINI_API_KEY': GEMINI_API_KEY,
    'WEATHER_API_KEY': WEATHER_API_KEY,
    'MODEL_CACHE_TIMEOUT': 3600,  # 1 hour
    'MAX_RECOMMENDATIONS': 5,
    'MIN_CONFIDENCE_THRESHOLD': 0.1,
    'CACHE_DIR': os.path.join(BASE_DIR, 'ai_cache'),
    'MODEL_DIR': os.path.join(BASE_DIR, 'recommendations', 'models'),
}

# Ensure AI directories exist
os.makedirs(AI_CONFIG['CACHE_DIR'], exist_ok=True)
os.makedirs(AI_CONFIG['MODEL_DIR'], exist_ok=True)

# Custom user model - TEMPORARILY COMMENT OUT
# AUTH_USER_MODEL = 'users.UserProfile'  # ⬅️ COMMENT THIS OUT TEMPORARILY

# Email settings
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', '')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@agrogram.com')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
        'ai_file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'ai.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': True,
        },
        'recommendations': {
            'handlers': ['console', 'ai_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'users': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Ensure logs directory exists
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Security settings
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    X_FRAME_OPTIONS = 'DENY'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# API Rate limiting
RATELIMIT_ENABLE = os.getenv('RATELIMIT_ENABLE', 'False').lower() == 'true'
RATELIMIT_RATE = os.getenv('RATELIMIT_RATE', '1000/hour')

# Celery Configuration (for background tasks)
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Custom settings
AGROGRAM_CONFIG = {
    'APP_NAME': 'Agro-Gram',
    'VERSION': '1.0.0',
    'SUPPORT_EMAIL': 'agrogram@gmail.com',
    'MAX_FARMS_PER_USER': 5,
    'MAX_PRODUCTS_PER_FARM': 50,
    'AI_RECOMMENDATION_ENABLED': True,
    'MARKETPLACE_ENABLED': True,
}

# Kaggle Configuration
KAGGLE_USERNAME = os.getenv('KAGGLE_USERNAME', '')
KAGGLE_KEY = os.getenv('KAGGLE_KEY', '')

# Redis Configuration (optional, for caching)
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379')

# Data directories
DATA_DIR = os.path.join(BASE_DIR, 'data')
KAGGLE_DATA_DIR = os.path.join(DATA_DIR, 'kaggle_datasets')

# Create directories if they don't exist
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(KAGGLE_DATA_DIR, exist_ok=True)

# ML Model settings
ML_MODELS_DIR = os.path.join(BASE_DIR, 'recommendations', 'ml_models', 'trained_models')
os.makedirs(ML_MODELS_DIR, exist_ok=True)

# Django Extensions (for development)
SHELL_PLUS = "ipython"
GRAPH_MODELS = {
    'all_applications': True,
    'group_models': True,
}

print(f"✅ Agro-Gram API Settings Loaded - Debug: {DEBUG}, AI Enabled: {AI_CONFIG['GEMINI_API_KEY'] is not None}")