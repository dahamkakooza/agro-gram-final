# Generated by Django 5.2.6 on 2025-10-02 11:20

import django.contrib.postgres.search
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CropHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crop_name', models.CharField(max_length=100)),
                ('variety', models.CharField(blank=True, max_length=100, null=True)),
                ('planting_date', models.DateField()),
                ('harvest_date', models.DateField(blank=True, null=True)),
                ('yield_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Yield in tons', max_digits=10, null=True)),
                ('quality_grade', models.CharField(blank=True, max_length=50, null=True)),
                ('market_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price per unit at harvest', max_digits=10, null=True)),
                ('fertilizer_used', models.JSONField(blank=True, default=dict, help_text='Fertilizers and quantities')),
                ('water_usage', models.DecimalField(blank=True, decimal_places=2, help_text='Water usage in liters', max_digits=10, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('success_score', models.FloatField(blank=True, help_text='Crop success rating (0-1)', null=True)),
                ('lessons_learned', models.TextField(blank=True, help_text='AI-generated insights', null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Crop history',
                'ordering': ['-planting_date'],
            },
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('total_area', models.DecimalField(decimal_places=2, help_text='Area in acres', max_digits=10)),
                ('soil_type', models.CharField(blank=True, choices=[('LOAMY', 'Loamy'), ('CLAY', 'Clay'), ('SANDY', 'Sandy'), ('SILTY', 'Silty'), ('PEAT', 'Peat'), ('CHALKY', 'Chalky')], max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('productivity_score', models.FloatField(default=0.5, help_text='Overall farm productivity score (0-1)')),
                ('risk_assessment', models.JSONField(blank=True, default=dict, help_text='AI-generated risk assessment')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='FarmAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_yield', models.FloatField(default=0, help_text='Average yield across all crops')),
                ('success_rate', models.FloatField(default=0, help_text='Crop success rate (0-1)')),
                ('resource_efficiency', models.FloatField(default=0, help_text='Resource utilization efficiency')),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('total_costs', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('profitability_score', models.FloatField(default=0)),
                ('improvement_recommendations', models.JSONField(blank=True, default=list)),
                ('risk_alerts', models.JSONField(blank=True, default=list)),
                ('seasonal_planning', models.JSONField(blank=True, default=dict)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='FarmTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('task_type', models.CharField(help_text='e.g., Planting, Irrigation, Harvesting', max_length=100)),
                ('due_date', models.DateField()),
                ('estimated_duration', models.IntegerField(default=1, help_text='Estimated duration in hours')),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('ai_recommendations', models.JSONField(blank=True, default=dict, help_text='AI-generated task recommendations')),
                ('weather_considerations', models.JSONField(blank=True, default=dict, help_text='Weather-related advice')),
                ('completed_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['due_date', 'priority'],
            },
        ),
        migrations.CreateModel(
            name='Plot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plot_number', models.CharField(max_length=50)),
                ('area', models.DecimalField(decimal_places=2, help_text='Area in acres', max_digits=10)),
                ('current_crop', models.CharField(blank=True, max_length=100, null=True)),
                ('planting_date', models.DateField(blank=True, null=True)),
                ('expected_harvest_date', models.DateField(blank=True, null=True)),
                ('crop_status', models.CharField(choices=[('PLANNED', 'Planned'), ('PLANTED', 'Planted'), ('GROWING', 'Growing'), ('READY', 'Ready for Harvest'), ('HARVESTED', 'Harvested'), ('FALLOW', 'Fallow')], default='FALLOW', max_length=20)),
                ('soil_ph', models.FloatField(blank=True, help_text='Soil pH level', null=True)),
                ('soil_moisture', models.FloatField(blank=True, help_text='Soil moisture percentage', null=True)),
                ('nutrient_level', models.JSONField(blank=True, default=dict, help_text='N-P-K levels')),
                ('recommended_crops', models.JSONField(blank=True, default=list, help_text='AI-recommended crops for this plot')),
                ('yield_prediction', models.FloatField(blank=True, help_text='Predicted yield in tons', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['plot_number'],
            },
        ),
    ]
